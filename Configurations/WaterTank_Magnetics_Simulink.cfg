+WebRoot = {
    Class = HttpObjectBrowser
    Root = "."
    +ObjectBrowse = {
        Class = HttpObjectBrowser
        Root = "/"
    }
    +ResourcesHtml = {
        Class = HttpDirectoryResource
        BaseDir = "/opt/marte/MARTe2-dev/Resources/HTTP"
    }    
    +ResourcesHtmlDemo = {
        Class = HttpDirectoryResource
        BaseDir = "/home/felipe/Projects/MARTe2-demos-padova/Resources/HTTP"
    } 
    +HttpMessageInterface = {
        Class = HttpMessageInterface
        +GOTOIDLE = {
            Class = Message
            Destination = StateMachine
            Function = GOTOIDLE
            Mode = ExpectsReply
        }
        +GOTORUN = {
            Class = Message
            Destination = StateMachine
            Function = GOTORUN
            Mode = ExpectsReply
        }
        +GOTOERR = {
            Class = Message
            Destination = StateMachineError
            Function = GOTOERR 
            Mode = ExpectsReply
        }
    }
}
//WARNING: Change values according to your local setup
/*
+LoggerService = {
    Class = PlainLoggerService //See note 1
    +UDPLogger = {
        Class = UDPLogger
        Address = "127.0.0.1" //MARTe2 LogView receiver address
        // Address = "10.136.241.211" //MARTe2 LogView receiver address
        Port = 32767 //MARTe2 LogView receiver port
        Format = "EtOofFRmCP" //See note 2
        PrintKeys = 1 //This **must** be enabled, see note 3
    }
}
*/
+WebServer = {
    Class = HttpService
    Port = 8084
    WebRoot = WebRoot
    Timeout = 0
    ListenMaxConnections = 255
    AcceptTimeout = 1000
    MaxNumberOfThreads = 8
    MinNumberOfThreads = 1
}
+TCPMessageProxy = {
    Class = TCPSocketMessageProxyExample
    Port = 24680
}
// echo -e "Destination=StateMachine\nFunction=GOTORUN" | nc 127.0.0.1 24680
+StateMachine = {
    Class = StateMachine
    +INITIAL = {
        Class = ReferenceContainer      
        +START = {
            Class = StateMachineEvent
            NextState = "IDLE"
            NextStateError = "ERROR"
            Timeout = 0
            +StartHttpServer = {
                Class = Message
                Destination = "WebServer"
                Mode = ExpectsReply
                Function = "Start"
            }
            +ChangeToStateIdleMsg = {
                Class = Message
                Destination = WaterTankApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Idle
                }
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = WaterTankApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
    }
    +IDLE = {
        Class = ReferenceContainer
        +GOTORUN = {
            Class = StateMachineEvent
            NextState = "RUN"
            NextStateError = "ERROR"
            Timeout = 0 
            +ChangeToRunMsg = {
                Class = Message
                Destination = WaterTankApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Run
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = WaterTankApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = WaterTankApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
    }
    +RUN = {
        Class = ReferenceContainer
        +ENTER = {
            Class = ReferenceContainer
            +SetStatusPV = {
                Class = Message
                Destination = "EPICSCAInterface.PV_STATUS"
                Function = CAPut
                Mode = ExpectsReply
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = 1
                }
            }
        }
        +GOTOIDLE = {
            Class = StateMachineEvent
            NextState = "IDLE"
            NextStateError = "ERROR"
            Timeout = 0         
            +ChangeToIdleMsg = {
                Class = Message
                Destination = WaterTankApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Idle
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = WaterTankApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = WaterTankApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
            +SetStatusPV = {
                Class = Message
                Destination = "EPICSCAInterface.PV_STATUS"
                Function = CAPut
                Mode = ExpectsReply
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = 0
                }
            }
        }   
    }
    +ERROR = {
        Class = ReferenceContainer
        +ENTER = {
            Class = ReferenceContainer
            +SetStatusPV = {
                Class = Message
                Destination = "EPICSCAInterface.PV_STATUS"
                Function = CAPut
                Mode = ExpectsReply
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = -1
                }
            }
            +ChangeToErrorMsg = {
                Class = Message
                Destination = WaterTankApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Error
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = WaterTankApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = WaterTankApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
        +RESET = {
            Class = StateMachineEvent
            NextState = "IDLE"
            NextStateError = "ERROR"
            Timeout = 0         
            +ChangeToIdleMsg = {
                Class = Message
                Destination = WaterTankApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Idle
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = WaterTankApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = WaterTankApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
            +SetStatusPV = {
                Class = Message
                Destination = "EPICSCAInterface.PV_STATUS"
                Function = CAPut
                Mode = ExpectsReply
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = 0
                }
            }
        }   
    }
}

$WaterTankApp = {
    Class = RealTimeApplication
    +Functions = {
        Class = ReferenceContainer
        +GAMTimer = {
            Class = IOGAM
            InputSignals = {
                Counter = {
                    DataSource = Timer
                    Type = uint32
                }
                Time = {
                    Frequency = 10000
                    DataSource = Timer
                    Type = uint32
                }
            }
            OutputSignals = {
                Counter = {
                    DataSource = DDB1
                    Type = uint32
                }                
                Time = {
                    DataSource = DDB1
                    Type = uint32
                }            
            }
        }
        +GAMDisplay = {
            Class = IOGAM            
            InputSignals = {
                Counter = {
                    DataSource = DDB1
                    Type = uint32
                }
                inputMirnov0 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                inputMirnov1 = {
                    DataSource = "DDB1"
                    Type = float64
                }            
            }
            OutputSignals = {
                Counter = {
                    DataSource = LoggerDataSource
                    Type = uint32
                }
                inputMirnov0 = {
                    DataSource = LoggerDataSource
                    Type = float64
                }
                inputMirnov1 = {
                    DataSource = LoggerDataSource
                    Type = float64
                }  
            }
        }   
        +GAMDisplayFull = {
            Class = IOGAM            
            InputSignals = {
                Counter = {
                    DataSource = DDB1
                    Type = uint32
                }
                inputMirnov0 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                inputMirnov1 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                outputMpIp = {
                    DataSource = "DDB1"
                    Type = float64
                }               
            }
            OutputSignals = {
                Counter = {
                    DataSource = LoggerDataSource
                    Type = uint32
                }
                inputMirnov0 = {
                    DataSource = LoggerDataSource
                    Type = float64
                }
                inputMirnov1 = {
                    DataSource = LoggerDataSource
                    Type = float64
                }  
                outputMpIp = {
                    DataSource = LoggerDataSource
                    Type = float64
                }      
            }
        }
        +GAMWFsin = {
            Class = WaveformGAM::WaveformSin
            Amplitude = 10.0
            Frequency = 0.25
            Phase = 0.0
            Offset = 45.0
            InputSignals = {
                Time = {
                    DataSource = DDB1
                    Type = uint32 //Supported type uint32 (int32 also valid since time cannot be negative. uint64 && int64 valid types)
                }
            }
            OutputSignals = {
                inputMirnov0 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                inputMirnov1 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                inputMirnov2 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                inputMirnov3 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                inputMirnov4 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                inputMirnov5 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                inputMirnov6 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                inputMirnov7 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                inputMirnov8 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                inputMirnov9 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                inputMirnov10 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                inputMirnov11 = {
                    DataSource = "DDB1"
                    Type = float64
                }
            }
        }
        +GAMinputMirnov = {
            Class = ConstantGAM
            OutputSignals = {
                inputMirnov0 = {
                    DataSource = "DDB1"
                    Type = float64
                    Default = 1.0
                }
                inputMirnov1 = {
                    DataSource = "DDB1"
                    Type = float64
                    Default = 1.0
                }
                inputMirnov2 = {
                    DataSource = "DDB1"
                    Type = float64
                    Default = 1.0
                }
                inputMirnov3 = {
                    DataSource = "DDB1"
                    Type = float64
                    Default = 1.0
                }
                inputMirnov4 = {
                    DataSource = "DDB1"
                    Type = float64
                    Default = 1.0
                }
                inputMirnov5 = {
                    DataSource = "DDB1"
                    Type = float64
                    Default = 1.0
                }
                inputMirnov6 = {
                    DataSource = "DDB1"
                    Type = float64
                    Default = 1.0
                }
                inputMirnov7 = {
                    DataSource = "DDB1"
                    Type = float64
                    Default = 1.0
                }
                inputMirnov8 = {
                    DataSource = "DDB1"
                    Type = float64
                    Default = 1.0
                }
                inputMirnov9 = {
                    DataSource = "DDB1"
                    Type = float64
                    Default = 1.0
                }
                inputMirnov10 = {
                    DataSource = "DDB1"
                    Type = float64
                    Default = 1.0
                }
                inputMirnov11 = {
                    DataSource = "DDB1"
                    Type = float64
                    Default = 1.0
                }
            }
        }
        +MagneticRZPosGAM = {
	        Class = SimulinkWrapperGAM
	        Library = MagneticRZPos.so
	        SymbolPrefix = MagneticRZPos
            InputSignals = {
                inputMirnov0 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                inputMirnov1 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                inputMirnov2 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                inputMirnov3 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                inputMirnov4 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                inputMirnov5 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                inputMirnov6 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                inputMirnov7 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                inputMirnov8 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                inputMirnov9 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                inputMirnov10 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                inputMirnov11 = {
                    DataSource = "DDB1"
                    Type = float64
                }
            }
            OutputSignals = {
                outputMpIp = {
                    DataSource = "DDB1"
                    Type = float64
                }
                outputMpR = {
                    DataSource = "DDB1"
                    Type = float64
                }
                outputMpZ = {
                    DataSource = "DDB1"
                    Type = float64
                }
            }
	    }
    }
    +Data = {
        Class = ReferenceContainer
        DefaultDataSource = DDB1
        +DDB1 = {
            Class = GAMDataSource
        }        
        +LoggerDataSource = {
            Class = LoggerDataSource
        }
        +Timings = {
            Class = TimingDataSource
        }
        +Timer = {
            Class = LinuxTimer
            SleepNature = "Default"
            Signals = {
                Counter = {
                    Type = uint32
                }
                Time = {
                    Type = uint32
                }
            }
        }        

    }
    +States = {
        Class = ReferenceContainer
            +Idle = {
                Class = RealTimeState
                +Threads = {
                    Class = ReferenceContainer
                        +Thread1 = {
                            Class = RealTimeThread
                            CPUs = 0x1
                            Functions = {GAMTimer GAMWFsin MagneticRZPosGAM GAMDisplayFull}
                        }
                }
            }        
            +Run = {
                Class = RealTimeState
                +Threads = {
                    Class = ReferenceContainer
                        +Thread1 = {
                            Class = RealTimeThread
                            CPUs = 0x1
                            Functions = {GAMTimer GAMinputMirnov GAMDisplay} 
                        }
                }
            } 
    }
    +Scheduler = {
        Class = GAMScheduler
        TimingDataSource = Timings
    }
}
//  vim: syntax=cpp ts=4 sw=4 sts=4 sr et
