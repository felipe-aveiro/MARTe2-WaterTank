+WebRoot = {
    Class = HttpObjectBrowser
    Root = "."
    +ObjectBrowse = {
        Class = HttpObjectBrowser
        Root = "/"
    }
    +ResourcesHtml = {
        Class = HttpDirectoryResource
        BaseDir = "/opt/marte/MARTe2-dev/Resources/HTTP"
    }    
    +ResourcesHtmlDemo = {
        Class = HttpDirectoryResource
        BaseDir = "/home/felipe/Projects/MARTe2-demos-padova/Resources/HTTP"
    } 
    +HttpMessageInterface = {
        Class = HttpMessageInterface
        +GOTOIDLE = {
            Class = Message
            Destination = StateMachine
            Function = GOTOIDLE
            Mode = ExpectsReply
        }
        +GOTORUN = {
            Class = Message
            Destination = StateMachine
            Function = GOTORUN
            Mode = ExpectsReply
        }
        +GOTOERR = {
            Class = Message
            Destination = StateMachineError
            Function = GOTOERR 
            Mode = ExpectsReply
        }
    }
}
/*
//WARNING: Change values according to your local setup
+LoggerService = {
    Class = PlainLoggerService //See note 1
    +UDPLogger = {
        Class = UDPLogger
        // Address = "127.0.0.1" //MARTe2 LogView receiver address
        Address = "10.136.241.211" //MARTe2 LogView receiver address
        Port = 32767 //MARTe2 LogView receiver port
        Format = "EtOofFRmCP" //See note 2
        PrintKeys = 1 //This **must** be enabled, see note 3
    }
}
*/
+WebServer = {
    Class = HttpService
    Port = 8084
    WebRoot = WebRoot
    Timeout = 0
    ListenMaxConnections = 255
    AcceptTimeout = 1000
    MaxNumberOfThreads = 8
    MinNumberOfThreads = 1
}
+TCPMessageProxy = {
    Class = TCPSocketMessageProxyExample
    Port = 24680
}
// echo -e "Destination=StateMachine\nFunction=GOTORUN" | nc 127.0.0.1 24680
+StateMachine = {
    Class = StateMachine
    +INITIAL = {
        Class = ReferenceContainer      
        +START = {
            Class = StateMachineEvent
            NextState = "IDLE"
            NextStateError = "ERROR"
            Timeout = 0
            +StartHttpServer = {
                Class = Message
                Destination = "WebServer"
                Mode = ExpectsReply
                Function = "Start"
            }
            +ChangeToStateIdleMsg = {
                Class = Message
                Destination = WaterTankApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Idle
                }
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = WaterTankApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
    }
    +IDLE = {
        Class = ReferenceContainer
        +GOTORUN = {
            Class = StateMachineEvent
            NextState = "RUN"
            NextStateError = "ERROR"
            Timeout = 0 
            +ChangeToRunMsg = {
                Class = Message
                Destination = WaterTankApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Run
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = WaterTankApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = WaterTankApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
    }
    +RUN = {
        Class = ReferenceContainer
        +ENTER = {
            Class = ReferenceContainer
            +SetStatusPV = {
                Class = Message
                Destination = "EPICSCAInterface.PV_STATUS"
                Function = CAPut
                Mode = ExpectsReply
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = 1
                }
            }
        }
        +GOTOIDLE = {
            Class = StateMachineEvent
            NextState = "IDLE"
            NextStateError = "ERROR"
            Timeout = 0         
            +ChangeToIdleMsg = {
                Class = Message
                Destination = WaterTankApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Idle
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = WaterTankApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = WaterTankApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
            +SetStatusPV = {
                Class = Message
                Destination = "EPICSCAInterface.PV_STATUS"
                Function = CAPut
                Mode = ExpectsReply
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = 0
                }
            }
        }   
    }
    +ERROR = {
        Class = ReferenceContainer
        +ENTER = {
            Class = ReferenceContainer
            +SetStatusPV = {
                Class = Message
                Destination = "EPICSCAInterface.PV_STATUS"
                Function = CAPut
                Mode = ExpectsReply
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = -1
                }
            }
            +ChangeToErrorMsg = {
                Class = Message
                Destination = WaterTankApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Error
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = WaterTankApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = WaterTankApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
        +RESET = {
            Class = StateMachineEvent
            NextState = "IDLE"
            NextStateError = "ERROR"
            Timeout = 0         
            +ChangeToIdleMsg = {
                Class = Message
                Destination = WaterTankApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Idle
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = WaterTankApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = WaterTankApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
            +SetStatusPV = {
                Class = Message
                Destination = "EPICSCAInterface.PV_STATUS"
                Function = CAPut
                Mode = ExpectsReply
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = 0
                }
            }
        }   
    }
}

$WaterTankApp = {
    Class = RealTimeApplication
    +Functions = {
        Class = ReferenceContainer
        +GAMTimer = {
            Class = IOGAM
            InputSignals = {
                Counter = {
                    DataSource = Timer
                    Type = uint32
                }
                Time = {
                    Frequency = 10
                    DataSource = Timer
                    Type = uint32
                }
            }
            OutputSignals = {
                Counter = {
                    DataSource = DDB1
                    Type = uint32
                }                
                Time = {
                    DataSource = DDB1
                    Type = uint32
                }            
            }
        }
        +GAMDisplay = {
            Class = IOGAM            
            InputSignals = {
                Counter = {
                    DataSource = DDB1
                    Type = uint32
                }
                outputMpIp = {
                    DataSource = DDB1
                    Type = float32
                }
                outputMpR = {
                    DataSource = DDB1
                    Type = float32
                }
                outputMpZ = {
                    DataSource = DDB1
                    Type = float32
                }
                correctedMirnov11 = {
                    DataSource = "DDB1"
                    Type = float32
                }
            }
            OutputSignals = {
                Counter = {
                    DataSource = LoggerDataSource
                    Type = uint32
                }
                outputMpIp = {
                    DataSource = LoggerDataSource
                    Type = float32
                }
                outputMpR = {
                    DataSource = LoggerDataSource
                    Type = float32
                }
                outputMpZ = {
                    DataSource = LoggerDataSource
                    Type = float32
                }
                correctedMirnov11 = {
                    DataSource = LoggerDataSource
                    Type = float32
                }
            }
        }       
        +GAMWFsin = {
            Class = WaveformGAM::WaveformSin
            Amplitude = 10.0
            Frequency = 0.25
            Phase = 0.0
            Offset = 45.0
            InputSignals = {
                Time = {
                    DataSource = DDB1
                    Type = uint32 //Supported type uint32 (int32 also valid since time cannot be negative. uint64 && int64 valid types)
                }
            }
            OutputSignals = {
                inputMirnov0 = {
                    DataSource = "DDB1"
                    Type = float32
                }
                inputMirnov1 = {
                    DataSource = "DDB1"
                    Type = float32
                }
                inputMirnov2 = {
                    DataSource = "DDB1"
                    Type = float32
                }
                inputMirnov3 = {
                    DataSource = "DDB1"
                    Type = float32
                }
                inputMirnov4 = {
                    DataSource = "DDB1"
                    Type = float32
                }
                inputMirnov5 = {
                    DataSource = "DDB1"
                    Type = float32
                }
                inputMirnov6 = {
                    DataSource = "DDB1"
                    Type = float32
                }
                inputMirnov7 = {
                    DataSource = "DDB1"
                    Type = float32
                }
                inputMirnov8 = {
                    DataSource = "DDB1"
                    Type = float32
                }
                inputMirnov9 = {
                    DataSource = "DDB1"
                    Type = float32
                }
                inputMirnov10 = {
                    DataSource = "DDB1"
                    Type = float32
                }
                inputMirnov11 = {
                    DataSource = "DDB1"
                    Type = float32
                }
            }
        }
        /* 
            << correctedMirnov = Mirnov[i] * Gain[i] * Pol[i] * (1/efArea[i]) >> 
                                ---------   -------   ------    ------------
            
           [!]NOTE: Mirnov probes in the Diagnostics MDSplus branch are tagged with an index ahead, i.e. PROBE1 = CHANNEL_0
           
            • by approximation: << magField(B) [T] = magFlux(\phi) [V*s] / efArea [m²] >>

                • thus, dividing the measurements by their respective effective areas 
                  yields the magnitude of the magnetic field picked up by each Mirnov coil
        */
        +MirnovCorrectionGAM = { 
            Class = MathExpressionGAM
            Expression = "
                        effAreaMirnov0 =  (float32)2.793 * pow((float32)0.1, (float32)3.0); 
                        PolMirnov0 =  (float32)(-1.0);
                        GainMirnov0 = (float32)17.3887 * pow((float32)0.1, (float32)6.0);
                        CteMirnov0 = ((float32)GainMirnov0 * (float32)PolMirnov0) / (float32)effAreaMirnov0;
                        correctedMirnov0 = inputMirnov0  * (float32)CteMirnov0;
                        \n
                        effAreaMirnov1 =  (float32)2.814 * pow((float32)0.1, (float32)3.0); 
                        PolMirnov1 =  (float32)(-1.0);
                        GainMirnov1 = (float32)17.3938 * pow((float32)0.1, (float32)6.0);
                        CteMirnov1 = ((float32)GainMirnov1 * (float32)PolMirnov1) / (float32)effAreaMirnov1;
                        correctedMirnov1 = inputMirnov1  * (float32)CteMirnov1;
                        \n
                        effAreaMirnov2 =  (float32)2.839 * pow((float32)0.1, (float32)3.0); 
                        PolMirnov2 =  (float32)(1.0);
                        GainMirnov2 = (float32)17.4276 * pow((float32)0.1, (float32)6.0);
                        CteMirnov2 = ((float32)GainMirnov2 * (float32)PolMirnov2) / (float32)effAreaMirnov2;
                        correctedMirnov2 = inputMirnov2  * (float32)CteMirnov2;
                        \n
                        effAreaMirnov3 =  (float32)2.635 * pow((float32)0.1, (float32)3.0); 
                        PolMirnov3 =  (float32)(-1.0);
                        GainMirnov3 = (float32)17.4994 * pow((float32)0.1, (float32)6.0);
                        CteMirnov3 = ((float32)GainMirnov3 * (float32)PolMirnov3) / (float32)effAreaMirnov3;
                        correctedMirnov3 = inputMirnov3  * (float32)CteMirnov3;
                        \n
                        effAreaMirnov4 =  (float32)2.579 * pow((float32)0.1, (float32)3.0); 
                        PolMirnov4 =  (float32)(1.0);
                        GainMirnov4 = (float32)17.3827 * pow((float32)0.1, (float32)6.0);
                        CteMirnov4 = ((float32)GainMirnov4 * (float32)PolMirnov4) / (float32)effAreaMirnov4;
                        correctedMirnov4 = inputMirnov4  * (float32)CteMirnov4;
                        \n
                        effAreaMirnov5 =  (float32)2.202 * pow((float32)0.1, (float32)3.0); 
                        PolMirnov5 =  (float32)(1.0);
                        GainMirnov5 = (float32)17.444 * pow((float32)0.1, (float32)6.0);
                        CteMirnov5 = ((float32)GainMirnov5 * (float32)PolMirnov5) / (float32)effAreaMirnov5;
                        correctedMirnov5 = inputMirnov5  * (float32)CteMirnov5;
                        \n
                        effAreaMirnov6 =  (float32)2.183 * pow((float32)0.1, (float32)3.0); 
                        PolMirnov6 =  (float32)(-1.0);
                        GainMirnov6 = (float32)17.4532 * pow((float32)0.1, (float32)6.0);
                        CteMirnov6 = ((float32)GainMirnov6 * (float32)PolMirnov6) / (float32)effAreaMirnov6;
                        correctedMirnov6 = inputMirnov6  * (float32)CteMirnov6;
                        \n
                        effAreaMirnov7 =  (float32)2.218 * pow((float32)0.1, (float32)3.0); 
                        PolMirnov7 =  (float32)(1.0);
                        GainMirnov7 = (float32)17.3724 * pow((float32)0.1, (float32)6.0);
                        CteMirnov7 = ((float32)GainMirnov7 * (float32)PolMirnov7) / (float32)effAreaMirnov7;
                        correctedMirnov7 = inputMirnov7  * (float32)CteMirnov7;
                        \n
                        effAreaMirnov8 =  (float32)2.305 * pow((float32)0.1, (float32)3.0); 
                        PolMirnov8 =  (float32)(1.0);
                        GainMirnov8 = (float32)17.1925 * pow((float32)0.1, (float32)6.0);
                        CteMirnov8 = ((float32)GainMirnov8 * (float32)PolMirnov8) / (float32)effAreaMirnov8;
                        correctedMirnov8 = inputMirnov8  * (float32)CteMirnov8;
                        \n
                        effAreaMirnov9 =  (float32)1.686 * pow((float32)0.1, (float32)3.0); 
                        PolMirnov9 =  (float32)(1.0);
                        GainMirnov9 = (float32)17.2739 * pow((float32)0.1, (float32)6.0);
                        CteMirnov9 = ((float32)GainMirnov9 * (float32)PolMirnov9) / (float32)effAreaMirnov9;
                        correctedMirnov9 = inputMirnov9  * (float32)CteMirnov9;
                        \n
                        effAreaMirnov10 =  (float32)2.705 * pow((float32)0.1, (float32)3.0); 
                        PolMirnov10 =  (float32)(-1.0);
                        GainMirnov10 = (float32)17.381 * pow((float32)0.1, (float32)6.0);
                        CteMirnov10 = ((float32)GainMirnov10 * (float32)PolMirnov10) / (float32)effAreaMirnov10;
                        correctedMirnov10 = inputMirnov10  * (float32)CteMirnov10;
                        \n
                        effAreaMirnov11 =  (float32)2.442 * pow((float32)0.1, (float32)3.0); 
                        PolMirnov11 =  (float32)(1.0);
                        GainMirnov11 = (float32)17.4413 * pow((float32)0.1, (float32)6.0);
                        CteMirnov11 = ((float32)GainMirnov11 * (float32)PolMirnov11) / (float32)effAreaMirnov11;
                        correctedMirnov11 = inputMirnov11  * (float32)CteMirnov11;
                        \n
                         "
            InputSignals = {
                inputMirnov0 = {
                    DataSource = "DDB1"
                    Type = float32
                }
                inputMirnov1 = {
                    DataSource = "DDB1"
                    Type = float32
                }
                inputMirnov2 = {
                    DataSource = "DDB1"
                    Type = float32
                }
                inputMirnov3 = {
                    DataSource = "DDB1"
                    Type = float32
                }
                inputMirnov4 = {
                    DataSource = "DDB1"
                    Type = float32
                }
                inputMirnov5 = {
                    DataSource = "DDB1"
                    Type = float32
                }
                inputMirnov6 = {
                    DataSource = "DDB1"
                    Type = float32
                }
                inputMirnov7 = {
                    DataSource = "DDB1"
                    Type = float32
                }
                inputMirnov8 = {
                    DataSource = "DDB1"
                    Type = float32
                }
                inputMirnov9 = {
                    DataSource = "DDB1"
                    Type = float32
                }
                inputMirnov10 = {
                    DataSource = "DDB1"
                    Type = float32
                }
                inputMirnov11 = {
                    DataSource = "DDB1"
                    Type = float32
                }
            }
            OutputSignals = {
                correctedMirnov0 = {
                    DataSource = "DDB1"
                    Type = float32
                }
                correctedMirnov1 = {
                    DataSource = "DDB1"
                    Type = float32
                }
                correctedMirnov2 = {
                    DataSource = "DDB1"
                    Type = float32
                }
                correctedMirnov3 = {
                    DataSource = "DDB1"
                    Type = float32
                }
                correctedMirnov4 = {
                    DataSource = "DDB1"
                    Type = float32
                }
                correctedMirnov5 = {
                    DataSource = "DDB1"
                    Type = float32
                }
                correctedMirnov6 = {
                    DataSource = "DDB1"
                    Type = float32
                }
                correctedMirnov7 = {
                    DataSource = "DDB1"
                    Type = float32
                }
                correctedMirnov8 = {
                    DataSource = "DDB1"
                    Type = float32
                }
                correctedMirnov9 = {
                    DataSource = "DDB1"
                    Type = float32
                }
                correctedMirnov10 = {
                    DataSource = "DDB1"
                    Type = float32
                }
                correctedMirnov11 = {
                    DataSource = "DDB1"
                    Type = float32
                }
            }
        }
        +MagneticRZPosGAM = {
	        Class = MagneticRZPosGAM
            InputSignals = {
                correctedMirnov0 = {
                    DataSource = "DDB1"
                    Type = float32
                }
                correctedMirnov1 = {
                    DataSource = "DDB1"
                    Type = float32
                }
                correctedMirnov2 = {
                    DataSource = "DDB1"
                    Type = float32
                }
                correctedMirnov3 = {
                    DataSource = "DDB1"
                    Type = float32
                }
                correctedMirnov4 = {
                    DataSource = "DDB1"
                    Type = float32
                }
                correctedMirnov5 = {
                    DataSource = "DDB1"
                    Type = float32
                }
                correctedMirnov6 = {
                    DataSource = "DDB1"
                    Type = float32
                }
                correctedMirnov7 = {
                    DataSource = "DDB1"
                    Type = float32
                }
                correctedMirnov8 = {
                    DataSource = "DDB1"
                    Type = float32
                }
                correctedMirnov9 = {
                    DataSource = "DDB1"
                    Type = float32
                }
                correctedMirnov10 = {
                    DataSource = "DDB1"
                    Type = float32
                }
                correctedMirnov11 = {
                    DataSource = "DDB1"
                    Type = float32
                }
            }
            OutputSignals = {
                outputMpIp = {
                    DataSource = DDB1
                    Type = float32
                }
                outputMpR = {
                    DataSource = DDB1
                    Type = float32
                }
                outputMpZ = {
                    DataSource = DDB1
                    Type = float32
                }
            }
	    }
        +GAMUDP = {
            Class = IOGAM            
                InputSignals = {
                    correctedMirnov0 = {
                        DataSource = "DDB1"
                        Type = float32
                    }
                    correctedMirnov1 = {
                        DataSource = "DDB1"
                        Type = float32
                    }
                    correctedMirnov2 = {
                        DataSource = "DDB1"
                        Type = float32
                    }
                    correctedMirnov3 = {
                        DataSource = "DDB1"
                        Type = float32
                    }
                    correctedMirnov4 = {
                        DataSource = "DDB1"
                        Type = float32
                    }
                    correctedMirnov5 = {
                        DataSource = "DDB1"
                        Type = float32
                    }
                    correctedMirnov6 = {
                        DataSource = "DDB1"
                        Type = float32
                    }
                    correctedMirnov7 = {
                        DataSource = "DDB1"
                        Type = float32
                    }
                    correctedMirnov8 = {
                        DataSource = "DDB1"
                        Type = float32
                    }
                    correctedMirnov9 = {
                        DataSource = "DDB1"
                        Type = float32
                    }
                    correctedMirnov10 = {
                        DataSource = "DDB1"
                        Type = float32
                    }
                    correctedMirnov11 = {
                        DataSource = "DDB1"
                        Type = float32
                    }
                } 
                OutputSignals = {
                    correctedMirnov0 = {
                        DataSource = UDPWriter
                        Type = float32
                    }
                    correctedMirnov1 = {
                        DataSource = UDPWriter
                        Type = float32
                    }
                    correctedMirnov2 = {
                        DataSource = UDPWriter
                        Type = float32
                    }
                    correctedMirnov3 = {
                        DataSource = UDPWriter
                        Type = float32
                    }
                    correctedMirnov4 = {
                        DataSource = UDPWriter
                        Type = float32
                    }
                    correctedMirnov5 = {
                        DataSource = UDPWriter
                        Type = float32
                    }
                    correctedMirnov6 = {
                        DataSource = UDPWriter
                        Type = float32
                    }
                    correctedMirnov7 = {
                        DataSource = UDPWriter
                        Type = float32
                    }
                    correctedMirnov8 = {
                        DataSource = UDPWriter
                        Type = float32
                    }
                    correctedMirnov9 = {
                        DataSource = UDPWriter
                        Type = float32
                    }
                    correctedMirnov10 = {
                        DataSource = UDPWriter
                        Type = float32
                    }
                    correctedMirnov11 = {
                        DataSource = UDPWriter
                        Type = float32
                    }
            }
        }
    }
    +Data = {
        Class = ReferenceContainer
        DefaultDataSource = DDB1
        +DDB1 = {
            Class = GAMDataSource
        }        
        +LoggerDataSource = {
            Class = LoggerDataSource
        }
        +Timings = {
            Class = TimingDataSource
        }
        +UDPWriter = {
            Class = UDP::UDPSender
            Port = 7755
            Address = "127.0.0.1" 
            ExecutionMode = RealTimeThread 
            Signals = {
                correctedMirnov0 = {
                    Type = float32
                }
                correctedMirnov1 = {
                    Type = float32
                }
                correctedMirnov2 = {
                    Type = float32
                }
                correctedMirnov3 = {
                    Type = float32
                }
                correctedMirnov4 = {
                    Type = float32
                }
                correctedMirnov5 = {
                    Type = float32
                }
                correctedMirnov6 = {
                    Type = float32
                }
                correctedMirnov7 = {
                    Type = float32
                }
                correctedMirnov8 = {
                    Type = float32
                }
                correctedMirnov9 = {
                    Type = float32
                }
                correctedMirnov10 = {
                    Type = float32
                }
                correctedMirnov11 = {
                    Type = float32
                }
            }
        }
        +Timer = {
            Class = LinuxTimer
            SleepNature = "Default"
            Signals = {
                Counter = {
                    Type = uint32
                }
                Time = {
                    Type = uint32
                }
            }
        }        

    }
    +States = {
        Class = ReferenceContainer
            +Idle = {
                Class = RealTimeState
                +Threads = {
                    Class = ReferenceContainer
                        +Thread1 = {
                            Class = RealTimeThread
                            CPUs = 0x1
                            Functions = {GAMTimer GAMWFsin MirnovCorrectionGAM MagneticRZPosGAM GAMDisplay}
                        }
                }
            }        
            +Run = {
                Class = RealTimeState
                +Threads = {
                    Class = ReferenceContainer
                        +Thread1 = {
                            Class = RealTimeThread
                            CPUs = 0x1
                            Functions = {GAMTimer} 
                        }
                }
            } 
    }
    +Scheduler = {
        Class = GAMScheduler
        TimingDataSource = Timings
    }
}
//  vim: syntax=cpp ts=4 sw=4 sts=4 sr et
