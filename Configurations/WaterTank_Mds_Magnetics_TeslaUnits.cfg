+WebRoot = {
    Class = HttpObjectBrowser
    Root = "."
    +ObjectBrowse = {
        Class = HttpObjectBrowser
        Root = "/"
    }
    +ResourcesHtml = {
        Class = HttpDirectoryResource
        BaseDir = "/opt/marte/MARTe2-dev/Resources/HTTP"
    }    
    +ResourcesHtmlDemo = {
        Class = HttpDirectoryResource
        BaseDir = "/home/felipe/Projects/MARTe2-demos-padova/Resources/HTTP"
    } 
    +HttpMessageInterface = {
        Class = HttpMessageInterface
        +GOTOIDLE = {
            Class = Message
            Destination = StateMachine
            Function = GOTOIDLE
            Mode = ExpectsReply
        }
        +GOTORUN = {
            Class = Message
            Destination = StateMachine
            Function = GOTORUN
            Mode = ExpectsReply
        }
        +GOTOERR = {
            Class = Message
            Destination = StateMachineError
            Function = GOTOERR 
            Mode = ExpectsReply
        }
    }
}
/*
//WARNING: Change values according to your local setup
+LoggerService = {
    Class = PlainLoggerService //See note 1
    +UDPLogger = {
        Class = UDPLogger
        // Address = "127.0.0.1" //MARTe2 LogView receiver address
        Address = "10.136.241.211" //MARTe2 LogView receiver address
        Port = 32767 //MARTe2 LogView receiver port
        Format = "EtOofFRmCP" //See note 2
        PrintKeys = 1 //This **must** be enabled, see note 3
    }
}
*/
+WebServer = {
    Class = HttpService
    Port = 8084
    WebRoot = WebRoot
    Timeout = 0
    ListenMaxConnections = 255
    AcceptTimeout = 1000
    MaxNumberOfThreads = 8
    MinNumberOfThreads = 1
}
+TCPMessageProxy = {
    Class = TCPSocketMessageProxyExample
    Port = 24680
}
// echo -e "Destination=StateMachine\nFunction=GOTORUN" | nc 127.0.0.1 24680
+StateMachine = {
    Class = StateMachine
    +INITIAL = {
        Class = ReferenceContainer      
        +START = {
            Class = StateMachineEvent
            NextState = "IDLE"
            NextStateError = "ERROR"
            Timeout = 0
            +StartHttpServer = {
                Class = Message
                Destination = "WebServer"
                Mode = ExpectsReply
                Function = "Start"
            }
            +ChangeToStateIdleMsg = {
                Class = Message
                Destination = WaterTankApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Idle
                }
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = WaterTankApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
    }
    +IDLE = {
        Class = ReferenceContainer
        +GOTORUN = {
            Class = StateMachineEvent
            NextState = "RUN"
            NextStateError = "ERROR"
            Timeout = 0 
            +ChangeToRunMsg = {
                Class = Message
                Destination = WaterTankApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Run
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = WaterTankApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = WaterTankApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
    }
    +RUN = {
        Class = ReferenceContainer
        +ENTER = {
            Class = ReferenceContainer
            +SetStatusPV = {
                Class = Message
                Destination = "EPICSCAInterface.PV_STATUS"
                Function = CAPut
                Mode = ExpectsReply
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = 1
                }
            }
        }
        +GOTOIDLE = {
            Class = StateMachineEvent
            NextState = "IDLE"
            NextStateError = "ERROR"
            Timeout = 0         
            +ChangeToIdleMsg = {
                Class = Message
                Destination = WaterTankApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Idle
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = WaterTankApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = WaterTankApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
            +SetStatusPV = {
                Class = Message
                Destination = "EPICSCAInterface.PV_STATUS"
                Function = CAPut
                Mode = ExpectsReply
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = 0
                }
            }
        }   
    }
    +ERROR = {
        Class = ReferenceContainer
        +ENTER = {
            Class = ReferenceContainer
            +SetStatusPV = {
                Class = Message
                Destination = "EPICSCAInterface.PV_STATUS"
                Function = CAPut
                Mode = ExpectsReply
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = -1
                }
            }
            +ChangeToErrorMsg = {
                Class = Message
                Destination = WaterTankApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Error
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = WaterTankApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = WaterTankApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
        +RESET = {
            Class = StateMachineEvent
            NextState = "IDLE"
            NextStateError = "ERROR"
            Timeout = 0         
            +ChangeToIdleMsg = {
                Class = Message
                Destination = WaterTankApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Idle
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = WaterTankApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = WaterTankApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
            +SetStatusPV = {
                Class = Message
                Destination = "EPICSCAInterface.PV_STATUS"
                Function = CAPut
                Mode = ExpectsReply
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = 0
                }
            }
        }   
    }
}

$WaterTankApp = {
    Class = RealTimeApplication
    +Functions = {
        Class = ReferenceContainer
        +GAMTimer = {
            Class = IOGAM
            InputSignals = {
                Counter = {
                    DataSource = Timer
                    Type = uint32
                }
                Time = {
                    Frequency = 10000
                    DataSource = Timer
                    Type = uint32
                }
            }
            OutputSignals = {
                Counter = {
                    DataSource = DDB1
                    Type = uint32
                }                
                Time = {
                    DataSource = DDB1
                    Type = uint32
                }            
            }
        }
        +GAMDisplay = {
            Class = IOGAM            
            InputSignals = {
                Counter = {
                    DataSource = DDB1
                    Type = uint32
                }
                inputMirnov11 = {
                    DataSource = "DDB1"
                    Type = float64
                }
            }
            OutputSignals = {
                Counter = {
                    DataSource = LoggerDataSource
                    Type = uint32
                }
                inputMirnov11 = {
                    DataSource = LoggerDataSource
                    Type = float64
                }
            }
        }
        +GAMDisplayTime = {
            Class = IOGAM            
            InputSignals = {
                Counter = {
                    DataSource = DDB1
                    Type = uint32
                }
            }
            OutputSignals = {
                Counter = {
                    DataSource = LoggerDataSource
                    Type = uint32
                }
            }
        }       
        +FileReaderGAM = {
            Class = IOGAM
            InputSignals = {
                timeI = {
                    DataSource = FileReader
                    Type = float64
                }
                integ_ch0 = {
                    DataSource = FileReader
                    Type = float64
                }
                integ_ch1 = {
                    DataSource = FileReader
                    Type = float64
                }
                integ_ch2 = {
                    DataSource = FileReader
                    Type = float64
                }
                integ_ch3 = {
                    DataSource = FileReader
                    Type = float64
                }
                integ_ch4 = {
                    DataSource = FileReader
                    Type = float64
                }
                integ_ch5 = {
                    DataSource = FileReader
                    Type = float64
                }
                integ_ch6 = {
                    DataSource = FileReader
                    Type = float64
                }
                integ_ch7 = {
                    DataSource = FileReader
                    Type = float64
                }
                integ_ch8 = {
                    DataSource = FileReader
                    Type = float64
                }
                integ_ch9 = {
                    DataSource = FileReader
                    Type = float64
                }
                integ_ch10 = {
                    DataSource = FileReader
                    Type = float64
                }
                integ_ch11 = {
                    DataSource = FileReader
                    Type = float64
                }
                integ_ch12 = {
                    DataSource = FileReader
                    Type = float64
                }
                chopper_trigger = {
                        DataSource = FileReader
                        Type = float64
                }
            }
            OutputSignals = {
                timeI = {
                    DataSource = "DDB1"
                    Type = float64
                }
                integMirnov0 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                integMirnov1 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                integMirnov2 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                integMirnov3 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                integMirnov4 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                integMirnov5 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                integMirnov6 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                integMirnov7 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                integMirnov8 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                integMirnov9 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                integMirnov10 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                integMirnov11 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                rogowski_ch = {
                    DataSource = "DDB1"
                    Type = float64
                }
                chopper_trigger = {
                        DataSource = "DDB1"
                        Type = float64
                }
            }
        }
        /* 
            << inputMirnov = Mirnov[i] * Gain[i] * Pol[i] * (1/efArea[i]) >> 
                                ---------   -------   ------    ------------
            
           [!]NOTE: Mirnov probes in the Diagnostics MDSplus branch are tagged with an index ahead, i.e. PROBE1 = CHANNEL_0
           
            • by approximation: << magField(B) [T] = magFlux(\phi) [V*s] / efArea [m²] >>

                • thus, dividing the measurements by their respective effective areas 
                  yields the magnitude of the magnetic field picked up by each Mirnov coil
        */
        +MirnovCorrectionGAM = { 
            Class = MathExpressionGAM
            Expression = "
                        CLOCK_FREQ = (float64)10000.0;
                        RT_DECIM = (float64)200.0;
                        faradaySign = (float64)(-1.0);
                        \n
                        correctionCte = (float64)faradaySign/((float64)CLOCK_FREQ * (float64)RT_DECIM);
                        \n
                        effAreaMirnov0 =  (float64)2.793 * pow((float64)0.1, (float64)3.0); 
                        PolMirnov0 =  (float64)(-1.0);
                        GainMirnov0 = (float64)17.3887 * pow((float64)0.1, (float64)6.0);
                        CteMirnov0 = ((float64)GainMirnov0 * (float64)PolMirnov0) / (float64)effAreaMirnov0;
                        inputMirnov0 = integMirnov0  * (float64)CteMirnov0 * (float64)correctionCte;
                        \n
                        effAreaMirnov1 =  (float64)2.814 * pow((float64)0.1, (float64)3.0); 
                        PolMirnov1 =  (float64)(-1.0);
                        GainMirnov1 = (float64)17.3938 * pow((float64)0.1, (float64)6.0);
                        CteMirnov1 = ((float64)GainMirnov1 * (float64)PolMirnov1) / (float64)effAreaMirnov1;
                        inputMirnov1 = integMirnov1  * (float64)CteMirnov1 * (float64)correctionCte;
                        \n
                        effAreaMirnov2 =  (float64)2.839 * pow((float64)0.1, (float64)3.0); 
                        PolMirnov2 =  (float64)(1.0);
                        GainMirnov2 = (float64)17.4276 * pow((float64)0.1, (float64)6.0);
                        CteMirnov2 = ((float64)GainMirnov2 * (float64)PolMirnov2) / (float64)effAreaMirnov2;
                        inputMirnov2 = integMirnov2  * (float64)CteMirnov2 * (float64)correctionCte;
                        \n
                        effAreaMirnov3 =  (float64)2.635 * pow((float64)0.1, (float64)3.0); 
                        PolMirnov3 =  (float64)(-1.0);
                        GainMirnov3 = (float64)17.4994 * pow((float64)0.1, (float64)6.0);
                        CteMirnov3 = ((float64)GainMirnov3 * (float64)PolMirnov3) / (float64)effAreaMirnov3;
                        inputMirnov3 = integMirnov3  * (float64)CteMirnov3 * (float64)correctionCte;
                        \n
                        effAreaMirnov4 =  (float64)2.579 * pow((float64)0.1, (float64)3.0); 
                        PolMirnov4 =  (float64)(1.0);
                        GainMirnov4 = (float64)17.3827 * pow((float64)0.1, (float64)6.0);
                        CteMirnov4 = ((float64)GainMirnov4 * (float64)PolMirnov4) / (float64)effAreaMirnov4;
                        inputMirnov4 = integMirnov4  * (float64)CteMirnov4 * (float64)correctionCte;
                        \n
                        effAreaMirnov5 =  (float64)2.202 * pow((float64)0.1, (float64)3.0); 
                        PolMirnov5 =  (float64)(1.0);
                        GainMirnov5 = (float64)17.444 * pow((float64)0.1, (float64)6.0);
                        CteMirnov5 = ((float64)GainMirnov5 * (float64)PolMirnov5) / (float64)effAreaMirnov5;
                        inputMirnov5 = integMirnov5  * (float64)CteMirnov5 * (float64)correctionCte;
                        \n
                        effAreaMirnov6 =  (float64)2.183 * pow((float64)0.1, (float64)3.0); 
                        PolMirnov6 =  (float64)(1.0);
                        GainMirnov6 = (float64)17.4532 * pow((float64)0.1, (float64)6.0);
                        CteMirnov6 = ((float64)GainMirnov6 * (float64)PolMirnov6) / (float64)effAreaMirnov6;
                        inputMirnov6 = integMirnov6  * (float64)CteMirnov6 * (float64)correctionCte;
                        \n
                        effAreaMirnov7 =  (float64)2.218 * pow((float64)0.1, (float64)3.0); 
                        PolMirnov7 =  (float64)(1.0);
                        GainMirnov7 = (float64)17.3724 * pow((float64)0.1, (float64)6.0);
                        CteMirnov7 = ((float64)GainMirnov7 * (float64)PolMirnov7) / (float64)effAreaMirnov7;
                        inputMirnov7 = integMirnov7  * (float64)CteMirnov7 * (float64)correctionCte;
                        \n
                        effAreaMirnov8 =  (float64)2.305 * pow((float64)0.1, (float64)3.0); 
                        PolMirnov8 =  (float64)(1.0);
                        GainMirnov8 = (float64)17.1925 * pow((float64)0.1, (float64)6.0);
                        CteMirnov8 = ((float64)GainMirnov8 * (float64)PolMirnov8) / (float64)effAreaMirnov8;
                        inputMirnov8 = integMirnov8  * (float64)CteMirnov8 * (float64)correctionCte;
                        \n
                        effAreaMirnov9 =  (float64)1.686 * pow((float64)0.1, (float64)3.0); 
                        PolMirnov9 =  (float64)(1.0);
                        GainMirnov9 = (float64)17.2739 * pow((float64)0.1, (float64)6.0);
                        CteMirnov9 = ((float64)GainMirnov9 * (float64)PolMirnov9) / (float64)effAreaMirnov9;
                        inputMirnov9 = integMirnov9  * (float64)CteMirnov9 * (float64)correctionCte;
                        \n
                        effAreaMirnov10 =  (float64)2.705 * pow((float64)0.1, (float64)3.0); 
                        PolMirnov10 =  (float64)(-1.0);
                        GainMirnov10 = (float64)17.381 * pow((float64)0.1, (float64)6.0);
                        CteMirnov10 = ((float64)GainMirnov10 * (float64)PolMirnov10) / (float64)effAreaMirnov10;
                        inputMirnov10 = integMirnov10  * (float64)CteMirnov10 * (float64)correctionCte;
                        \n
                        effAreaMirnov11 =  (float64)2.442 * pow((float64)0.1, (float64)3.0); 
                        PolMirnov11 =  (float64)(1.0);
                        GainMirnov11 = (float64)17.4413 * pow((float64)0.1, (float64)6.0);
                        CteMirnov11 = ((float64)GainMirnov11 * (float64)PolMirnov11) / (float64)effAreaMirnov11;
                        inputMirnov11 = integMirnov11  * (float64)CteMirnov11 * (float64)correctionCte;
                        \n
                        rogowski_ch_c = rogowski_ch * (float64)correctionCte * (float64)faradaySign;
                         "
            InputSignals = {
                integMirnov0 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                integMirnov1 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                integMirnov2 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                integMirnov3 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                integMirnov4 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                integMirnov5 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                integMirnov6 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                integMirnov7 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                integMirnov8 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                integMirnov9 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                integMirnov10 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                integMirnov11 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                rogowski_ch = {
                    DataSource = "DDB1"
                    Type = float64
                }
            }
            OutputSignals = {
                inputMirnov0 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                inputMirnov1 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                inputMirnov2 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                inputMirnov3 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                inputMirnov4 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                inputMirnov5 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                inputMirnov6 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                inputMirnov7 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                inputMirnov8 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                inputMirnov9 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                inputMirnov10 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                inputMirnov11 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                rogowski_ch_c = {
                    DataSource = "DDB1"
                    Type = float64
                }
            }
        }
        /* less accurate */
        +MagneticRZPosGAM = {
	        Class = MagneticRZPosGAM
            InputSignals = {
                inputMirnov0 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                inputMirnov1 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                inputMirnov2 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                inputMirnov3 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                inputMirnov4 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                inputMirnov5 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                inputMirnov6 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                inputMirnov7 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                inputMirnov8 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                inputMirnov9 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                inputMirnov10 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                inputMirnov11 = {
                    DataSource = "DDB1"
                    Type = float64
                }
            }
            OutputSignals = {
                outputMpIp = {
                    DataSource = DDB1
                    Type = float64
                }
                outputMpR = {
                    DataSource = DDB1
                    Type = float64
                }
                outputMpZ = {
                    DataSource = DDB1
                    Type = float64
                }
            }
	    }
        /* inputMirnov2 needs calibration (consider neglecting its data) -> problems in data acquisition, in ATCA1 inputMirnov2 works normally
           inputMirnov9 also needs calibration since values are different than expected */
        +MagneticRZPosSimulinkGAM = {
	        Class = SimulinkWrapperGAM
	        Library = MagneticRZPos_model.so
	        SymbolPrefix = MagneticRZPos_model
            Parameters = {
                bool_on_off = false
            }
            InputSignals = {
                inputMirnov0 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                inputMirnov1 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                inputMirnov2 = {            
                    DataSource = "DDB1"
                    Type = float64
                }
                inputMirnov3 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                inputMirnov4 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                inputMirnov5 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                inputMirnov6 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                inputMirnov7 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                inputMirnov8 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                inputMirnov9 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                inputMirnov10 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                inputMirnov11 = {
                    DataSource = "DDB1"
                    Type = float64
                }
            }
            OutputSignals = {
                outputMpIp = {
                    DataSource = "DDB1"
                    Type = float64
                }
                outputMpR = {
                    DataSource = "DDB1"
                    Type = float64
                }
                outputMpZ = {
                    DataSource = "DDB1"
                    Type = float64
                }
            }
	    }
        +MagneticIpSimulinkGAM = {
	        Class = SimulinkWrapperGAM
	        Library = MagneticIp_model.so
	        SymbolPrefix = MagneticIp_model
            InputSignals = {
                inputMirnov0 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                inputMirnov1 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                inputMirnov2 = {            
                    DataSource = "DDB1"
                    Type = float64
                }
                inputMirnov3 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                inputMirnov4 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                inputMirnov5 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                inputMirnov6 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                inputMirnov7 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                inputMirnov8 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                inputMirnov9 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                inputMirnov10 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                inputMirnov11 = {
                    DataSource = "DDB1"
                    Type = float64
                }
            }
            OutputSignals = {
                outputMpIp = {
                    DataSource = "DDB1"
                    Type = float64
                }
            }
	    }
        +FWriterGAM = {
            Class = IOGAM            
                InputSignals = {
                    timeI = {
                        DataSource = "DDB1"
                        Type = float64
                    }
                    inputMirnov0 = {
                        DataSource = "DDB1"
                        Type = float64
                    }
                    inputMirnov1 = {
                        DataSource = "DDB1"
                        Type = float64
                    }
                    inputMirnov2 = {
                        DataSource = "DDB1"
                        Type = float64
                    }
                    inputMirnov3 = {
                        DataSource = "DDB1"
                        Type = float64
                    }
                    inputMirnov4 = {
                        DataSource = "DDB1"
                        Type = float64
                    }
                    inputMirnov5 = {
                        DataSource = "DDB1"
                        Type = float64
                    }
                    inputMirnov6 = {
                        DataSource = "DDB1"
                        Type = float64
                    }
                    inputMirnov7 = {
                        DataSource = "DDB1"
                        Type = float64
                    }
                    inputMirnov8 = {
                        DataSource = "DDB1"
                        Type = float64
                    }
                    inputMirnov9 = {
                        DataSource = "DDB1"
                        Type = float64
                    }
                    inputMirnov10 = {
                        DataSource = "DDB1"
                        Type = float64
                    }
                    inputMirnov11 = {
                        DataSource = "DDB1"
                        Type = float64
                    }
                    rogowski_ch_c = {
                        DataSource = "DDB1"
                        Type = float64
                    }
                    outputMpIp = {
                        DataSource = "DDB1"
                        Type = float64
                    }
                    outputMpR = {
                        DataSource = "DDB1"
                        Type = float64
                    }
                    outputMpZ = {
                        DataSource = "DDB1"
                        Type = float64
                    }
                    chopper_trigger = {
                        DataSource = "DDB1"
                        Type = float64
                    }
                }
                OutputSignals = {
                    timeI = {
                        DataSource = "FileWriter_DS"
                        Type = float64
                    }
                    inputMirnov0 = {
                        DataSource = "FileWriter_DS"
                        Type = float64
                    }
                    inputMirnov1 = {
                        DataSource = "FileWriter_DS"
                        Type = float64
                    }
                    inputMirnov2 = {
                        DataSource = "FileWriter_DS"
                        Type = float64
                    }
                    inputMirnov3 = {
                        DataSource = "FileWriter_DS"
                        Type = float64
                    }
                    inputMirnov4 = {
                        DataSource = "FileWriter_DS"
                        Type = float64
                    }
                    inputMirnov5 = {
                        DataSource = "FileWriter_DS"
                        Type = float64
                    }
                    inputMirnov6 = {
                        DataSource = "FileWriter_DS"
                        Type = float64
                    }
                    inputMirnov7 = {
                        DataSource = "FileWriter_DS"
                        Type = float64
                    }
                    inputMirnov8 = {
                        DataSource = "FileWriter_DS"
                        Type = float64
                    }
                    inputMirnov9 = {
                        DataSource = "FileWriter_DS"
                        Type = float64
                    }
                    inputMirnov10 = {
                        DataSource = "FileWriter_DS"
                        Type = float64
                    }
                    inputMirnov11 = {
                        DataSource = "FileWriter_DS"
                        Type = float64
                    }
                    rogowski_ch_c = {
                        DataSource = "FileWriter_DS"
                        Type = float64
                    }
                    outputMpIp = {
                        DataSource = "FileWriter_DS"
                        Type = float64
                    }
                    outputMpR = {
                        DataSource = "FileWriter_DS"
                        Type = float64
                    }
                    outputMpZ = {
                        DataSource = "FileWriter_DS"
                        Type = float64
                    }
                    chopper_trigger = {
                        DataSource = "FileWriter_DS"
                        Type = float64
                    }
                }
        }
    }
    +Data = {
        Class = ReferenceContainer
        DefaultDataSource = DDB1
        +DDB1 = {
            Class = GAMDataSource
        }        
        +LoggerDataSource = {
            Class = LoggerDataSource
        }
        +Timings = {
            Class = TimingDataSource
        }
        +FileWriter_DS = {
            Class = FileDataSource::FileWriter
            NumberOfBuffers = 10000
            CPUMask = 1 
            StackSize = 10000000
            Filename = "./Outputs/IsttokOutput_Tesla.csv" 
            Overwrite = "yes" 
            FileFormat = "csv"
            CSVSeparator = ";" 
            StoreOnTrigger = 0  //Compulsory. If 0 all the data in the circular buffer is continuously stored. If 1 data is stored when the Trigger signal is 1 (see below).
            Signals = {
                timeI = {
                    Type = float64
                }
                inputMirnov0 = {
                    Type = float64
                }
                inputMirnov1 = {
                    Type = float64
                }
                inputMirnov2 = {
                    Type = float64
                }
                inputMirnov3 = {
                    Type = float64
                }
                inputMirnov4 = {
                    Type = float64
                }
                inputMirnov5 = {
                    Type = float64
                }
                inputMirnov6 = {
                    Type = float64
                }
                inputMirnov7 = {
                    Type = float64
                }
                inputMirnov8 = {
                    Type = float64
                }
                inputMirnov9 = {
                    Type = float64
                }
                inputMirnov10 = {
                    Type = float64
                }
                inputMirnov11 = {
                    Type = float64
                }
                rogowski_ch_c = {
                    Type = float64
                }
                outputMpIp = {
                    Type = float64
                }
                outputMpR = {
                    Type = float64
                }
                outputMpZ = {
                    Type = float64
                }
                chopper_trigger = {
                    Type = float64
                }
            }
        }
        +Timer = {
            Class = LinuxTimer
            SleepNature = "Default"
            Signals = {
                Counter = {
                    Type = uint32
                }
                Time = {
                    Type = uint32
                }
            }
        }        
        +FileReader = {
            Class = FileDataSource::FileReader
            Filename = "../MdsVisualization/ISTTOK_shots_CSV_files/csv/shot_53071.csv" 
            FileFormat = "csv"
            CSVSeparator = ","
            Interpolate = "no"
            EOF = "Error"
            +Messages = {
                Class = ReferenceContainer
                +FileRuntimeError = {
                    Class = Message
                    Destination = WaterTankApp
                    Function = PrepareNextState
                    Mode = ExpectsReply
                    +Parameters = {
                            Class = ConfigurationDatabase
                            param1 = Run
                        }
                    }
            }
        }
    }
    +States = {
        Class = ReferenceContainer
            +Idle = {
                Class = RealTimeState
                +Threads = {
                    Class = ReferenceContainer
                        +Thread1 = {
                            Class = RealTimeThread
                            CPUs = 0x1
                            Functions = {GAMTimer FileReaderGAM MirnovCorrectionGAM MagneticRZPosSimulinkGAM GAMDisplay FWriterGAM}
                        }
                }
            }        
            +Run = {
                Class = RealTimeState
                +Threads = {
                    Class = ReferenceContainer
                        +Thread1 = {
                            Class = RealTimeThread
                            CPUs = 0x1
                            Functions = {GAMTimer GAMDisplayTime} 
                        }
                }
            } 
    }
    +Scheduler = {
        Class = GAMScheduler
        TimingDataSource = Timings
    }
}
//  vim: syntax=cpp ts=4 sw=4 sts=4 sr et
