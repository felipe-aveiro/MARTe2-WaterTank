+WebRoot = {
    Class = HttpObjectBrowser
    Root = "."
    +ObjectBrowse = {
        Class = HttpObjectBrowser
        Root = "/"
    }
    +ResourcesHtml = {
        Class = HttpDirectoryResource
        BaseDir = "/opt/marte/MARTe2-dev/Resources/HTTP"
    }    
    +ResourcesHtmlDemo = {
        Class = HttpDirectoryResource
        BaseDir = "/home/felipe/Projects/MARTe2-demos-padova/Resources/HTTP"
    } 
    +HttpMessageInterface = {
        Class = HttpMessageInterface
        +GOTOIDLE = {
            Class = Message
            Destination = StateMachine
            Function = GOTOIDLE
            Mode = ExpectsReply
        }
        +GOTORUN = {
            Class = Message
            Destination = StateMachine
            Function = GOTORUN
            Mode = ExpectsReply
        }
        +GOTOERR = {
            Class = Message
            Destination = StateMachineError
            Function = GOTOERR 
            Mode = ExpectsReply
        }
    }
}
/*
//WARNING: Change values according to your local setup
+LoggerService = {
    Class = PlainLoggerService //See note 1
    +UDPLogger = {
        Class = UDPLogger
        // Address = "127.0.0.1" //MARTe2 LogView receiver address
        Address = "10.136.241.211" //MARTe2 LogView receiver address
        Port = 32767 //MARTe2 LogView receiver port
        Format = "EtOofFRmCP" //See note 2
        PrintKeys = 1 //This **must** be enabled, see note 3
    }
}
*/
+WebServer = {
    Class = HttpService
    Port = 8084
    WebRoot = WebRoot
    Timeout = 0
    ListenMaxConnections = 255
    AcceptTimeout = 1000
    MaxNumberOfThreads = 8
    MinNumberOfThreads = 1
}
+TCPMessageProxy = {
    Class = TCPSocketMessageProxyExample
    Port = 24680
}
// echo -e "Destination=StateMachine\nFunction=GOTORUN" | nc 127.0.0.1 24680
+StateMachine = {
    Class = StateMachine
    +INITIAL = {
        Class = ReferenceContainer      
        +START = {
            Class = StateMachineEvent
            NextState = "IDLE"
            NextStateError = "ERROR"
            Timeout = 0
            +StartHttpServer = {
                Class = Message
                Destination = "WebServer"
                Mode = ExpectsReply
                Function = "Start"
            }
            +ChangeToStateIdleMsg = {
                Class = Message
                Destination = WaterTankApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Idle
                }
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = WaterTankApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
    }
    +IDLE = {
        Class = ReferenceContainer
        +GOTORUN = {
            Class = StateMachineEvent
            NextState = "RUN"
            NextStateError = "ERROR"
            Timeout = 0 
            +ChangeToRunMsg = {
                Class = Message
                Destination = WaterTankApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Run
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = WaterTankApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = WaterTankApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
    }
    +RUN = {
        Class = ReferenceContainer
        +ENTER = {
            Class = ReferenceContainer
            +SetStatusPV = {
                Class = Message
                Destination = "EPICSCAInterface.PV_STATUS"
                Function = CAPut
                Mode = ExpectsReply
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = 1
                }
            }
        }
        +GOTOIDLE = {
            Class = StateMachineEvent
            NextState = "IDLE"
            NextStateError = "ERROR"
            Timeout = 0         
            +ChangeToIdleMsg = {
                Class = Message
                Destination = WaterTankApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Idle
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = WaterTankApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = WaterTankApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
            +SetStatusPV = {
                Class = Message
                Destination = "EPICSCAInterface.PV_STATUS"
                Function = CAPut
                Mode = ExpectsReply
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = 0
                }
            }
        }   
    }
    +ERROR = {
        Class = ReferenceContainer
        +ENTER = {
            Class = ReferenceContainer
            +SetStatusPV = {
                Class = Message
                Destination = "EPICSCAInterface.PV_STATUS"
                Function = CAPut
                Mode = ExpectsReply
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = -1
                }
            }
            +ChangeToErrorMsg = {
                Class = Message
                Destination = WaterTankApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Error
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = WaterTankApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = WaterTankApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
        +RESET = {
            Class = StateMachineEvent
            NextState = "IDLE"
            NextStateError = "ERROR"
            Timeout = 0         
            +ChangeToIdleMsg = {
                Class = Message
                Destination = WaterTankApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Idle
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = WaterTankApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = WaterTankApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
            +SetStatusPV = {
                Class = Message
                Destination = "EPICSCAInterface.PV_STATUS"
                Function = CAPut
                Mode = ExpectsReply
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = 0
                }
            }
        }   
    }
}
$WaterTankApp = {
    Class = RealTimeApplication
    +Functions = {
        Class = ReferenceContainer
        +GAMTimer = {
            Class = IOGAM
            InputSignals = {
                Counter = {
                    DataSource = Timer
                    Type = uint32
                }
                Time = {
                    Frequency = 1000
                    DataSource = Timer
                    Type = uint32
                }
            }
            OutputSignals = {
                Counter = {
                    DataSource = DDB1
                    Type = uint32
                }                
                Time = {
                    DataSource = DDB1
                    Type = uint32
                }            
            }
        }
        +TimingsGAM = {
            Class = IOGAM
            InputSignals = {
                Idle_Thread_CycleTime = {
                    DataSource = "Timings"
                    Alias = "Idle.Thread1_CycleTime"
                    Type = uint32
                }
            }
            OutputSignals = {
                Idle_Thread_CycleTime = {
                    DataSource = DDB1
                    Type = uint32
                }
            }
        }
        +HistogramGAM = {
            Class = HistogramGAM
            BeginCycleNumber = 0 //Optional. Start to compute histogram only after BeginCycleNumber cycles
            StateChangeResetName = All //Optional. If set it will reset when the PrepareNextState, nextStaName == StateChangeResetName. If the StateChangeResetName is set to "All", it will always reset.
            InputSignals = {
                Idle_Thread_CycleTime = {
                    DataSource = DDB1
                    Type = uint32
                    MinLim = 800
                    MaxLim = 1200
                }
            }
            OutputSignals = {
                Idle_Thread_Histogram = {
                    DataSource = FileWriter_DS
                    NumberOfDimensions = 1
                    Type = uint32
                    NumberOfElements = 18
                }
            }
        }
        +GAMRef = {
            Class = ConstantGAM
            OutputSignals = {
                WaterHeightReference = {
                    DataSource = "DDB1"
                    Type = float64
                    Default = 0.8
                }
            }
        }
        +ControlGAM = {
            Class = PIDGAM
            Kp = 30.0
            Ki = 0.015
            Kd = 0.0
            SampleTime = 0.001
            MaxOutput = 5.0 //optional
            MinOutput = 0.0 //optional
            InputSignals = {
                WaterHeightReference = {
                    DataSource = "DDB1"
                    Type = float64
                    NumberOfDimensions = 1
                }
                WaterHeight = { 
                    DataSource = "DDB1"
                    Type = float64
                    NumberOfDimensions = 1
                }
            }
            OutputSignals = {
                PumpVoltageRequest = {
                    DataSource = "DDB1"
                    Type = float64
                    NumberOfDimensions = 1
                }
            }
        }
        +GAMWaterTank = {
            Class = WaterTankGAM
            Parameters = {
                InitialHeight = 0.0 //Compulsory
                InputFlowRate  = 0.01 //Compulsory
                OutputFlowRate = 0.001 //Compulsory
                TankArea       = 2.0 //Compulsory
                MaxVoltage     = 12.0 //Compulsory
                MinVoltage     = 0.0 //Compulsory
            }
            InputSignals = {
                Time = { //UsecTime
                    DataSource = "DDB1"
                    Type = uint32
                }
                PumpVoltageRequest = {
                    DataSource = "DDB1"
                    Type = float64
                }
            }
            OutputSignals = {
                WaterHeight = {
                    DataSource = "DDB1"
                    Type = float64
                    NumberOfDimensions = 0
                }
                PumpVoltage = {
                    DataSource = "DDB1"
                    Type = float64
                    NumberOfDimensions = 0
                }
            }
        }
        +GAMDisplay = {
            Class = IOGAM
            InputSignals = {
                Time = {
                    DataSource = DDB1
                    Type = uint32
                }
                WaterHeightReference = {
                    DataSource = "DDB1"
                    Type = float64
                }
                WaterHeight = {
                    DataSource = "DDB1"
                    Type = float64
                }
            }
            OutputSignals = {
                Time = {
                    DataSource = LoggerDataSource
                    Type = uint32
                }
                WaterHeightReference = {
                    DataSource = LoggerDataSource
                    Type = float64
                }
                WaterHeight = {
                    DataSource = LoggerDataSource
                    Type = float64
                }
            }
        }
        +GAMUDP = {
                Class = IOGAM            
                InputSignals = {
                    Counter = {
                        DataSource = DDB1
                        Type = uint32
                    }
                    Time = {
                        DataSource = DDB1
                        Type = uint32
                    }
                    WaterHeightReference = {
                        DataSource = DDB1
                        Type = float64
                    }
                    WaterHeight = {
                        DataSource = DDB1
                        Type = float64
                    }
                } 
                OutputSignals = {
                    Counter = {
                        DataSource = UDPWriter
                        Type = uint32
                    }
                    Time = {
                        DataSource = UDPWriter
                        Type = uint32
                    }
                    Signal2 = {
                        DataSource = UDPWriter
                        Type = float64
                    }
                    Signal3 = {
                        DataSource = UDPWriter
                        Type = float64
                    }
                }
            }
    }
    +Data = {
        Class = ReferenceContainer
        DefaultDataSource = DDB1
        +DDB1 = {
            Class = GAMDataSource
        }        
        +LoggerDataSource = {
            Class = LoggerDataSource
        }
        +Timings = {
            Class = TimingDataSource
        }
        +UDPWriter = {
            Class = UDP::UDPSender
            Port = 7755
            Address = "127.0.0.1"  
            ExecutionMode = RealTimeThread 
            Signals = {
                Counter = {
                    Type = uint32
                }
                Time = {
                    Type = uint32
                }
                Signal2 = {
                    Type = float64
                }
                Signal3 = {
                    Type = float64
                }
            }
        }
        +Timer = {
            Class = LinuxTimer
            SleepNature = "Default"
            Signals = {
                Counter = {
                    Type = uint32
                }
                Time = {
                    Type = uint32
                }
            }
        }
        +FileWriter_DS = {
            Class = FileDataSource::FileWriter
            NumberOfBuffers = 1000
            CPUMask = 1
            StackSize = 10000000
            Filename = "../DataVisualization/Outputs/WTM-GAM-histogram.csv"
            Overwrite = "yes"
            FileFormat = "csv"
            CSVSeparator = ","
            StoreOnTrigger = 0
            Signals = {
                Idle_Thread_Histogram = {
                    Type = uint32
                    NumberOfDimensions = 1
                    NumberOfElements = 18
                }
            }
        }
    }
    +States = {
        Class = ReferenceContainer
        +Idle = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
                    CPUs = 0x1
                    Functions = {GAMTimer TimingsGAM GAMRef ControlGAM GAMWaterTank GAMDisplay GAMUDP HistogramGAM}
                }
            }
        }        
        +Run = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
                    CPUs = 0x1
                    Functions = {GAMTimer GAMRef ControlGAM GAMWaterTank GAMUDP}
                }
            }
        } 
    }
    +Scheduler = {
        Class = GAMScheduler
        TimingDataSource = Timings
    }
}
//  vim: syntax=cpp ts=4 sw=4 sts=4 sr et
