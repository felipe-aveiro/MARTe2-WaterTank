+WebRoot = {
    Class = HttpObjectBrowser
    Root = "."
    +ObjectBrowse = {
        Class = HttpObjectBrowser
        Root = "/"
    }
    +ResourcesHtml = {
        Class = HttpDirectoryResource
        BaseDir = "/opt/marte/MARTe2-dev/Resources/HTTP"
    }    
    +ResourcesHtmlDemo = {
        Class = HttpDirectoryResource
        BaseDir = "/home/felipe/Projects/MARTe2-demos-padova/Resources/HTTP"
    } 
    +HttpMessageInterface = {
        Class = HttpMessageInterface
        +GOTOIDLE = {
            Class = Message
            Destination = StateMachine
            Function = GOTOIDLE
            Mode = ExpectsReply
        }
        +GOTORUN = {
            Class = Message
            Destination = StateMachine
            Function = GOTORUN
            Mode = ExpectsReply
        }
        +GOTOERR = {
            Class = Message
            Destination = StateMachineError
            Function = GOTOERR 
            Mode = ExpectsReply
        }
    }
}
//WARNING: Change values according to your local setup
/*
+LoggerService = {
    Class = PlainLoggerService //See note 1
    +UDPLogger = {
        Class = UDPLogger
        Address = "127.0.0.1" //MARTe2 LogView receiver address
        // Address = "10.136.241.211" //MARTe2 LogView receiver address
        Port = 32767 //MARTe2 LogView receiver port
        Format = "EtOofFRmCP" //See note 2
        PrintKeys = 1 //This **must** be enabled, see note 3
    }
}
*/
+WebServer = {
    Class = HttpService
    Port = 8084
    WebRoot = WebRoot
    Timeout = 0
    ListenMaxConnections = 255
    AcceptTimeout = 1000
    MaxNumberOfThreads = 8
    MinNumberOfThreads = 1
}
+TCPMessageProxy = {
    Class = TCPSocketMessageProxyExample
    Port = 24680
}
// echo -e "Destination=StateMachine\nFunction=GOTORUN" | nc 127.0.0.1 24680
+StateMachine = {
    Class = StateMachine
    +INITIAL = {
        Class = ReferenceContainer      
        +START = {
            Class = StateMachineEvent
            NextState = "IDLE"
            NextStateError = "ERROR"
            Timeout = 0
            +StartHttpServer = {
                Class = Message
                Destination = "WebServer"
                Mode = ExpectsReply
                Function = "Start"
            }
            +ChangeToStateIdleMsg = {
                Class = Message
                Destination = WaterTankApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Idle
                }
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = WaterTankApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
    }
    +IDLE = {
        Class = ReferenceContainer
        +GOTORUN = {
            Class = StateMachineEvent
            NextState = "RUN"
            NextStateError = "ERROR"
            Timeout = 0 
            +ChangeToRunMsg = {
                Class = Message
                Destination = WaterTankApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Run
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = WaterTankApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = WaterTankApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
    }
    +RUN = {
        Class = ReferenceContainer
        +ENTER = {
            Class = ReferenceContainer
            +SetStatusPV = {
                Class = Message
                Destination = "EPICSCAInterface.PV_STATUS"
                Function = CAPut
                Mode = ExpectsReply
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = 1
                }
            }
        }
        +GOTOIDLE = {
            Class = StateMachineEvent
            NextState = "IDLE"
            NextStateError = "ERROR"
            Timeout = 0         
            +ChangeToIdleMsg = {
                Class = Message
                Destination = WaterTankApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Idle
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = WaterTankApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = WaterTankApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
            +SetStatusPV = {
                Class = Message
                Destination = "EPICSCAInterface.PV_STATUS"
                Function = CAPut
                Mode = ExpectsReply
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = 0
                }
            }
        }   
    }
    +ERROR = {
        Class = ReferenceContainer
        +ENTER = {
            Class = ReferenceContainer
            +SetStatusPV = {
                Class = Message
                Destination = "EPICSCAInterface.PV_STATUS"
                Function = CAPut
                Mode = ExpectsReply
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = -1
                }
            }
            +ChangeToErrorMsg = {
                Class = Message
                Destination = WaterTankApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Error
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = WaterTankApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = WaterTankApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
        +RESET = {
            Class = StateMachineEvent
            NextState = "IDLE"
            NextStateError = "ERROR"
            Timeout = 0         
            +ChangeToIdleMsg = {
                Class = Message
                Destination = WaterTankApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Idle
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = WaterTankApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = WaterTankApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
            +SetStatusPV = {
                Class = Message
                Destination = "EPICSCAInterface.PV_STATUS"
                Function = CAPut
                Mode = ExpectsReply
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = 0
                }
            }
        }   
    }
}

$WaterTankApp = {
    Class = RealTimeApplication
    +Functions = {
        Class = ReferenceContainer
        +GAMTimer = {
            Class = IOGAM
            InputSignals = {
                Counter = {
                    DataSource = Timer
                    Type = uint32
                }
                Time = {
                    Frequency = 10000
                    DataSource = Timer
                    Type = uint32
                }
            }
            OutputSignals = {
                Counter = {
                    DataSource = DDB1
                    Type = uint32
                }                
                Time = {
                    DataSource = DDB1
                    Type = uint32
                }            
            }
        }
        +CounterGAM = {
            Class = ConversionGAM
            InputSignals = {
                Counter = {
                    DataSource = "DDB1"
                    Type = uint32
                }
            }
            OutputSignals = {
                Counter0 = {
                    DataSource = "DDB1"
                    Type = float32
                }
            }
        }
        +CountdownGAM = { // Countdown value needs to be adjusted
            Class = MathExpressionGAM
            Expression = "
                          Countdown = (float32)6300.0 - ( Counter0 / (float32)10000.0 );
                         "
            InputSignals = {
                Counter0 = {
                    DataSource = "DDB1"
                    Type = float32
                }
            }
            OutputSignals = {
                Countdown = {
                    DataSource = "DDB1"
                    Type = float32
                }
            }
        }
        +MdsTimeGAM = { // Countdown value needs to be adjusted
            Class = MathExpressionGAM
            Expression = "
                          TimeMds = MdsTime / (uint32)10000;
                         "
            InputSignals = {
                MdsTime = {
                    DataSource = "DDB1"
                    Type = uint32
                }
            }
            OutputSignals = {
                TimeMds = {
                    DataSource = "DDB1"
                    Type = uint32
                }
            }
        }
        +GAMDisplay = {
            Class = IOGAM            
            InputSignals = {
                Countdown = {
                    DataSource = "DDB1"
                    Type = float32
                }
                correctedMirnov0 = {
                        DataSource = "DDB1"
                        Type = float32
                }
                correctedMirnov6 = {
                        DataSource = "DDB1"
                        Type = float32
                }
                TimeMds = {
                    DataSource = "DDB1"
                    Type = uint32
                }
                /*
                Counter = {
                    DataSource = DDB1
                    Type = uint32
                }                
                Time = {
                    DataSource = DDB1
                    Type = uint32
                }
                */
            }
            OutputSignals = {
                Countdown = {
                    DataSource = LoggerDataSource
                    Type = float32
                }
                correctedMirnov0 = {
                        DataSource = LoggerDataSource
                        Type = float32
                }
                correctedMirnov6 = {
                        DataSource = LoggerDataSource
                        Type = float32
                }
                TimeMds = {
                    DataSource = LoggerDataSource
                    Type = uint32
                }
                /*
                Counter = {
                    DataSource = LoggerDataSource
                    Type = uint32
                }                
                Time = {
                    DataSource = LoggerDataSource
                    Type = uint32
                }
                */       
            }
        }       
        +MDSReaderGAM = {
            Class = IOGAM
                InputSignals = {
                    MirnovMdsI0 = {
                        DataSource = MDSReader
                            Type = float32
                    }
                    MirnovMdsI1 = {
                        DataSource = MDSReader
                            Type = float32
                    }
                    MirnovMdsI2 = {
                        DataSource = MDSReader
                            Type = float32
                    }
                    MirnovMdsI3 = {
                        DataSource = MDSReader
                            Type = float32
                    }
                    MirnovMdsI4 = {
                        DataSource = MDSReader
                            Type = float32
                    }
                    MirnovMdsI5 = {
                        DataSource = MDSReader
                            Type = float32
                    }
                    MirnovMdsI6 = {
                        DataSource = MDSReader
                            Type = float32
                    }
                    MirnovMdsI7 = {
                        DataSource = MDSReader
                            Type = float32
                    }
                    MirnovMdsI8 = {
                        DataSource = MDSReader
                            Type = float32
                    }
                    MirnovMdsI9 = {
                        DataSource = MDSReader
                            Type = float32
                    }
                    MirnovMdsI10 = {
                        DataSource = MDSReader
                            Type = float32
                    }
                    MirnovMdsI11 = {
                        DataSource = MDSReader
                            Type = float32
                    }
                    Time = {
                        DataSource = MDSReader
                            Type = uint32
                    }
                }                
                OutputSignals = {
                    Mirnov0 = {
                        DataSource = "DDB1"
                        Type = float32
                    }
                    Mirnov1 = {
                        DataSource = "DDB1"
                        Type = float32
                    }
                    Mirnov2 = {
                        DataSource = "DDB1"
                        Type = float32
                    }
                    Mirnov3 = {
                        DataSource = "DDB1"
                        Type = float32
                    }
                    Mirnov4 = {
                        DataSource = "DDB1"
                        Type = float32
                    }
                    Mirnov5 = {
                        DataSource = "DDB1"
                        Type = float32
                    }
                    Mirnov6 = {
                        DataSource = "DDB1"
                        Type = float32
                    }
                    Mirnov7 = {
                        DataSource = "DDB1"
                        Type = float32
                    }
                    Mirnov8 = {
                        DataSource = "DDB1"
                        Type = float32
                    }
                    Mirnov9 = {
                        DataSource = "DDB1"
                        Type = float32
                    }
                    Mirnov10 = {
                        DataSource = "DDB1"
                        Type = float32
                    }
                    Mirnov11 = {
                        DataSource = "DDB1"
                        Type = float32
                    }
                    MdsTime = {
                        DataSource = "DDB1"
                        Type = uint32
                    }
                }
        }
        /* 
            << correctedMirnov = Mirnov[i] * Gain[i] * Pol[i] * (1/efArea[i]) >> 
                                ---------   -------   ------    ------------
            
           [!]NOTE: Mirnov probes in the Diagnostics MDSplus branch are tagged with an index ahead, i.e. PROBE1 = CHANNEL_0
           
            • by approximation: << magField(B) [T] = magFlux(\phi) [V*s] / efArea [m²] >>

                • thus, dividing the measurements by their respective effective areas 
                  yields the magnitude of the magnetic field picked up by each Mirnov coil
        */
        +MirnovCorrectionGAM = { 
            Class = MathExpressionGAM
            Expression = "
                        effAreaMirnov0 =  (float32)2.793 * pow((float32)0.1, (float32)3.0); 
                        PolMirnov0 =  (float32)(-1.0);
                        GainMirnov0 = (float32)17.3887 * pow((float32)0.1, (float32)6.0);
                        CteMirnov0 = ((float32)GainMirnov0 * (float32)PolMirnov0) / (float32)effAreaMirnov0;
                        correctedMirnov0 = Mirnov0  * (float32)CteMirnov0;
                        \n
                        effAreaMirnov1 =  (float32)2.814 * pow((float32)0.1, (float32)3.0); 
                        PolMirnov1 =  (float32)(-1.0);
                        GainMirnov1 = (float32)17.3938 * pow((float32)0.1, (float32)6.0);
                        CteMirnov1 = ((float32)GainMirnov1 * (float32)PolMirnov1) / (float32)effAreaMirnov1;
                        correctedMirnov1 = Mirnov1  * (float32)CteMirnov1;
                        \n
                        effAreaMirnov2 =  (float32)2.839 * pow((float32)0.1, (float32)3.0); 
                        PolMirnov2 =  (float32)(1.0);
                        GainMirnov2 = (float32)17.4276 * pow((float32)0.1, (float32)6.0);
                        CteMirnov2 = ((float32)GainMirnov2 * (float32)PolMirnov2) / (float32)effAreaMirnov2;
                        correctedMirnov2 = Mirnov2  * (float32)CteMirnov2;
                        \n
                        effAreaMirnov3 =  (float32)2.635 * pow((float32)0.1, (float32)3.0); 
                        PolMirnov3 =  (float32)(-1.0);
                        GainMirnov3 = (float32)17.4994 * pow((float32)0.1, (float32)6.0);
                        CteMirnov3 = ((float32)GainMirnov3 * (float32)PolMirnov3) / (float32)effAreaMirnov3;
                        correctedMirnov3 = Mirnov3  * (float32)CteMirnov3;
                        \n
                        effAreaMirnov4 =  (float32)2.579 * pow((float32)0.1, (float32)3.0); 
                        PolMirnov4 =  (float32)(1.0);
                        GainMirnov4 = (float32)17.3827 * pow((float32)0.1, (float32)6.0);
                        CteMirnov4 = ((float32)GainMirnov4 * (float32)PolMirnov4) / (float32)effAreaMirnov4;
                        correctedMirnov4 = Mirnov4  * (float32)CteMirnov4;
                        \n
                        effAreaMirnov5 =  (float32)2.202 * pow((float32)0.1, (float32)3.0); 
                        PolMirnov5 =  (float32)(1.0);
                        GainMirnov5 = (float32)17.444 * pow((float32)0.1, (float32)6.0);
                        CteMirnov5 = ((float32)GainMirnov5 * (float32)PolMirnov5) / (float32)effAreaMirnov5;
                        correctedMirnov5 = Mirnov5  * (float32)CteMirnov5;
                        \n
                        effAreaMirnov6 =  (float32)2.183 * pow((float32)0.1, (float32)3.0); 
                        PolMirnov6 =  (float32)(-1.0);
                        GainMirnov6 = (float32)17.4532 * pow((float32)0.1, (float32)6.0);
                        CteMirnov6 = ((float32)GainMirnov6 * (float32)PolMirnov6) / (float32)effAreaMirnov6;
                        correctedMirnov6 = Mirnov6  * (float32)CteMirnov6;
                        \n
                        effAreaMirnov7 =  (float32)2.218 * pow((float32)0.1, (float32)3.0); 
                        PolMirnov7 =  (float32)(1.0);
                        GainMirnov7 = (float32)17.3724 * pow((float32)0.1, (float32)6.0);
                        CteMirnov7 = ((float32)GainMirnov7 * (float32)PolMirnov7) / (float32)effAreaMirnov7;
                        correctedMirnov7 = Mirnov7  * (float32)CteMirnov7;
                        \n
                        effAreaMirnov8 =  (float32)2.305 * pow((float32)0.1, (float32)3.0); 
                        PolMirnov8 =  (float32)(1.0);
                        GainMirnov8 = (float32)17.1925 * pow((float32)0.1, (float32)6.0);
                        CteMirnov8 = ((float32)GainMirnov8 * (float32)PolMirnov8) / (float32)effAreaMirnov8;
                        correctedMirnov8 = Mirnov8  * (float32)CteMirnov8;
                        \n
                        effAreaMirnov9 =  (float32)1.686 * pow((float32)0.1, (float32)3.0); 
                        PolMirnov9 =  (float32)(1.0);
                        GainMirnov9 = (float32)17.2739 * pow((float32)0.1, (float32)6.0);
                        CteMirnov9 = ((float32)GainMirnov9 * (float32)PolMirnov9) / (float32)effAreaMirnov9;
                        correctedMirnov9 = Mirnov9  * (float32)CteMirnov9;
                        \n
                        effAreaMirnov10 =  (float32)2.705 * pow((float32)0.1, (float32)3.0); 
                        PolMirnov10 =  (float32)(-1.0);
                        GainMirnov10 = (float32)17.381 * pow((float32)0.1, (float32)6.0);
                        CteMirnov10 = ((float32)GainMirnov10 * (float32)PolMirnov10) / (float32)effAreaMirnov10;
                        correctedMirnov10 = Mirnov10  * (float32)CteMirnov10;
                        \n
                        effAreaMirnov11 =  (float32)2.442 * pow((float32)0.1, (float32)3.0); 
                        PolMirnov11 =  (float32)(1.0);
                        GainMirnov11 = (float32)17.4413 * pow((float32)0.1, (float32)6.0);
                        CteMirnov11 = ((float32)GainMirnov11 * (float32)PolMirnov11) / (float32)effAreaMirnov11;
                        correctedMirnov11 = Mirnov11  * (float32)CteMirnov11;
                        \n
                         "
            InputSignals = {
                Mirnov0 = {
                    DataSource = "DDB1"
                    Type = float32
                }
                Mirnov1 = {
                    DataSource = "DDB1"
                    Type = float32
                }
                Mirnov2 = {
                    DataSource = "DDB1"
                    Type = float32
                }
                Mirnov3 = {
                    DataSource = "DDB1"
                    Type = float32
                }
                Mirnov4 = {
                    DataSource = "DDB1"
                    Type = float32
                }
                Mirnov5 = {
                    DataSource = "DDB1"
                    Type = float32
                }
                Mirnov6 = {
                    DataSource = "DDB1"
                    Type = float32
                }
                Mirnov7 = {
                    DataSource = "DDB1"
                    Type = float32
                }
                Mirnov8 = {
                    DataSource = "DDB1"
                    Type = float32
                }
                Mirnov9 = {
                    DataSource = "DDB1"
                    Type = float32
                }
                Mirnov10 = {
                    DataSource = "DDB1"
                    Type = float32
                }
                Mirnov11 = {
                    DataSource = "DDB1"
                    Type = float32
                }
            }
            OutputSignals = {
                correctedMirnov0 = {
                    DataSource = "DDB1"
                    Type = float32
                }
                correctedMirnov1 = {
                    DataSource = "DDB1"
                    Type = float32
                }
                correctedMirnov2 = {
                    DataSource = "DDB1"
                    Type = float32
                }
                correctedMirnov3 = {
                    DataSource = "DDB1"
                    Type = float32
                }
                correctedMirnov4 = {
                    DataSource = "DDB1"
                    Type = float32
                }
                correctedMirnov5 = {
                    DataSource = "DDB1"
                    Type = float32
                }
                correctedMirnov6 = {
                    DataSource = "DDB1"
                    Type = float32
                }
                correctedMirnov7 = {
                    DataSource = "DDB1"
                    Type = float32
                }
                correctedMirnov8 = {
                    DataSource = "DDB1"
                    Type = float32
                }
                correctedMirnov9 = {
                    DataSource = "DDB1"
                    Type = float32
                }
                correctedMirnov10 = {
                    DataSource = "DDB1"
                    Type = float32
                }
                correctedMirnov11 = {
                    DataSource = "DDB1"
                    Type = float32
                }
            }
        }
        /*
        +MagneticRZPosGAM = {
	        Class = SimulinkWrapperGAM
	        Library = MagneticRZPos_model.so
	        SymbolPrefix = MagneticRZPos_model
            InputSignals = {
                inputMirnov0 = {
                    DataSource = "DDB1"
                    Type = float32
                }
                inputMirnov1 = {
                    DataSource = "DDB1"
                    Type = float32
                }
                inputMirnov2 = {
                    DataSource = "DDB1"
                    Type = float32
                }
                inputMirnov3 = {
                    DataSource = "DDB1"
                    Type = float32
                }
                inputMirnov4 = {
                    DataSource = "DDB1"
                    Type = float32
                }
                inputMirnov5 = {
                    DataSource = "DDB1"
                    Type = float32
                }
                inputMirnov6 = {
                    DataSource = "DDB1"
                    Type = float32
                }
                inputMirnov7 = {
                    DataSource = "DDB1"
                    Type = float32
                }
                inputMirnov8 = {
                    DataSource = "DDB1"
                    Type = float32
                }
                inputMirnov9 = {
                    DataSource = "DDB1"
                    Type = float32
                }
                inputMirnov10 = {
                    DataSource = "DDB1"
                    Type = float32
                }
                inputMirnov11 = {
                    DataSource = "DDB1"
                    Type = float32
                }
            }
            OutputSignals = {
                outputMpIp = {
                    DataSource = DDB1
                    Type = float32
                }
            }
	    }
        */
        +FWriterGAM = {
            Class = IOGAM            
                InputSignals = {
                    MdsTime = {
                        DataSource = "DDB1"
                        Type = uint32
                    }
                    correctedMirnov0 = {
                        DataSource = "DDB1"
                        Type = float32
                    }
                    correctedMirnov1 = {
                        DataSource = "DDB1"
                        Type = float32
                    }
                    correctedMirnov2 = {
                        DataSource = "DDB1"
                        Type = float32
                    }
                    correctedMirnov3 = {
                        DataSource = "DDB1"
                        Type = float32
                    }
                    correctedMirnov4 = {
                        DataSource = "DDB1"
                        Type = float32
                    }
                    correctedMirnov5 = {
                        DataSource = "DDB1"
                        Type = float32
                    }
                    correctedMirnov6 = {
                        DataSource = "DDB1"
                        Type = float32
                    }
                    correctedMirnov7 = {
                        DataSource = "DDB1"
                        Type = float32
                    }
                    correctedMirnov8 = {
                        DataSource = "DDB1"
                        Type = float32
                    }
                    correctedMirnov9 = {
                        DataSource = "DDB1"
                        Type = float32
                    }
                    correctedMirnov10 = {
                        DataSource = "DDB1"
                        Type = float32
                    }
                    correctedMirnov11 = {
                        DataSource = "DDB1"
                        Type = float32
                    }
                    /*
                    outputMpIp = {
                        DataSource = "DDB1"
                        Type = float32
                    }
                    */
                }
                OutputSignals = {
                    MdsTime = {
                        DataSource = "FileWriter_DS"
                        Type = uint32
                    }
                    correctedMirnov0 = {
                        DataSource = "FileWriter_DS"
                        Type = float32
                    }
                    correctedMirnov1 = {
                        DataSource = "FileWriter_DS"
                        Type = float32
                    }
                    correctedMirnov2 = {
                        DataSource = "FileWriter_DS"
                        Type = float32
                    }
                    correctedMirnov3 = {
                        DataSource = "FileWriter_DS"
                        Type = float32
                    }
                    correctedMirnov4 = {
                        DataSource = "FileWriter_DS"
                        Type = float32
                    }
                    correctedMirnov5 = {
                        DataSource = "FileWriter_DS"
                        Type = float32
                    }
                    correctedMirnov6 = {
                        DataSource = "FileWriter_DS"
                        Type = float32
                    }
                    correctedMirnov7 = {
                        DataSource = "FileWriter_DS"
                        Type = float32
                    }
                    correctedMirnov8 = {
                        DataSource = "FileWriter_DS"
                        Type = float32
                    }
                    correctedMirnov9 = {
                        DataSource = "FileWriter_DS"
                        Type = float32
                    }
                    correctedMirnov10 = {
                        DataSource = "FileWriter_DS"
                        Type = float32
                    }
                    correctedMirnov11 = {
                        DataSource = "FileWriter_DS"
                        Type = float32
                    }
                    /*
                    outputMpIp = {
                        DataSource = "FileWriter_DS"
                        Type = float32
                    }
                    */
                }
        }
        +GAMUDP = {
            Class = IOGAM            
                InputSignals = {
                    correctedMirnov0 = {
                        DataSource = "DDB1"
                        Type = float32
                    }
                    correctedMirnov1 = {
                        DataSource = "DDB1"
                        Type = float32
                    }
                    correctedMirnov2 = {
                        DataSource = "DDB1"
                        Type = float32
                    }
                    correctedMirnov3 = {
                        DataSource = "DDB1"
                        Type = float32
                    }
                    correctedMirnov4 = {
                        DataSource = "DDB1"
                        Type = float32
                    }
                    correctedMirnov5 = {
                        DataSource = "DDB1"
                        Type = float32
                    }
                    correctedMirnov6 = {
                        DataSource = "DDB1"
                        Type = float32
                    }
                    correctedMirnov7 = {
                        DataSource = "DDB1"
                        Type = float32
                    }
                    correctedMirnov8 = {
                        DataSource = "DDB1"
                        Type = float32
                    }
                    correctedMirnov9 = {
                        DataSource = "DDB1"
                        Type = float32
                    }
                    correctedMirnov10 = {
                        DataSource = "DDB1"
                        Type = float32
                    }
                    correctedMirnov11 = {
                        DataSource = "DDB1"
                        Type = float32
                    }
                } 
                OutputSignals = {
                    correctedMirnov0 = {
                        DataSource = UDPWriter
                        Type = float32
                    }
                    correctedMirnov1 = {
                        DataSource = UDPWriter
                        Type = float32
                    }
                    correctedMirnov2 = {
                        DataSource = UDPWriter
                        Type = float32
                    }
                    correctedMirnov3 = {
                        DataSource = UDPWriter
                        Type = float32
                    }
                    correctedMirnov4 = {
                        DataSource = UDPWriter
                        Type = float32
                    }
                    correctedMirnov5 = {
                        DataSource = UDPWriter
                        Type = float32
                    }
                    correctedMirnov6 = {
                        DataSource = UDPWriter
                        Type = float32
                    }
                    correctedMirnov7 = {
                        DataSource = UDPWriter
                        Type = float32
                    }
                    correctedMirnov8 = {
                        DataSource = UDPWriter
                        Type = float32
                    }
                    correctedMirnov9 = {
                        DataSource = UDPWriter
                        Type = float32
                    }
                    correctedMirnov10 = {
                        DataSource = UDPWriter
                        Type = float32
                    }
                    correctedMirnov11 = {
                        DataSource = UDPWriter
                        Type = float32
                    }
            }
        }
    }
    +Data = {
        Class = ReferenceContainer
        DefaultDataSource = DDB1
        +DDB1 = {
            Class = GAMDataSource
        }        
        +LoggerDataSource = {
            Class = LoggerDataSource
        }
        +Timings = {
            Class = TimingDataSource
        }
        +FileWriter_DS = {
            Class = FileDataSource::FileWriter
            NumberOfBuffers = 10000
            CPUMask = 1 
            StackSize = 10000000
            Filename = "./Outputs/IsttokOutput.csv" 
            Overwrite = "yes" 
            FileFormat = "csv"
            CSVSeparator = ";" 
            StoreOnTrigger = 0  //Compulsory. If 0 all the data in the circular buffer is continuously stored. If 1 data is stored when the Trigger signal is 1 (see below).
            Signals = {
                MdsTime = { 
                    Type = uint32
                }
                correctedMirnov0 = {
                    Type = float32
                }
                correctedMirnov1 = {
                    Type = float32
                }
                correctedMirnov2 = {
                    Type = float32
                }
                correctedMirnov3 = {
                    Type = float32
                }
                correctedMirnov4 = {
                    Type = float32
                }
                correctedMirnov5 = {
                    Type = float32
                }
                correctedMirnov6 = {
                    Type = float32
                }
                correctedMirnov7 = {
                    Type = float32
                }
                correctedMirnov8 = {
                    Type = float32
                }
                correctedMirnov9 = {
                    Type = float32
                }
                correctedMirnov10 = {
                    Type = float32
                }
                correctedMirnov11 = {
                    Type = float32
                }
                /*
                outputMpIp = {
                        Type = float32
                }
                */
            }
        }
        /*  DISCHARGE START -> [Information]: MdsTime: 633000000 us
        */
        +MDSReader = {
            Class = MDSReader
            TreeName = "isttokmarte" //Compulsory. Name of the MDSplus tree.
            ShotNumber = 52740 //Compulsory. 0 –> last shot number (to use 0 shotid.sys must exist)
            Frequency = 10000  // in Hz. Is the cycle time of the real time application.
            /* MDS frequency needs to be adjusted to obtain Mirnov signals (Default = 10000)*/
            Signals = {
                MirnovMdsI0 = {
                    NodeName = "\TOP.HARDWARE.ATCA_2.IOP_9.CHANNEL_0.ADC_INTEG"
                    Type = "float32" // Can be any of the node supported types
                    NumberOfElements = 1
/*
0 –> MDSReader takes the data from the tree as it is (raw). In this configuration, the frequency/numberOfElements must be the same than the node sampling frequency.
1–> MDSReader interpolates the signal taking as a reference the two nearest data values. If the frequency/numberOfElements is smaller than the sample frequency of the MDSplus node the data source interpolates the signal. If the frequency/numberOfElements larger than the node sample frequency the signals is decimated.
2 –> MDSReader holds the value following the criteria of the nearest value given specific time. I.e the node data is (t1, d1) = (1, 1) and (t2, d2) = (2, 5) and the currentTime is t = 1.6 the nearest data to the given time is 5.
  */                  
                    DataManagement = 1 //could be 0, 1 or 2
/*
 *0 –> MDSreader fills the absence of data with 0
* 1 –> MDSReader fills the absence of data with the last value.
*/
                    HoleManagement = 1 //could be 0 or 1
                }        
                MirnovMdsI1 = {
                    NodeName = "\TOP.HARDWARE.ATCA_2.IOP_9.CHANNEL_1.ADC_INTEG"
                    Type = "float32" // Can be any of the node supported types
                    NumberOfElements = 1
                    DataManagement = 1
                    HoleManagement = 1
                }        
                MirnovMdsI2 = {
                    NodeName = "\TOP.HARDWARE.ATCA_2.IOP_9.CHANNEL_2.ADC_INTEG"
                    Type = "float32" // Can be any of the node supported types
                    NumberOfElements = 1
                    DataManagement = 1
                    HoleManagement = 1
                }        
                MirnovMdsI3 = {
                    NodeName = "\TOP.HARDWARE.ATCA_2.IOP_9.CHANNEL_3.ADC_INTEG"
                    Type = "float32" // Can be any of the node supported types
                    NumberOfElements = 1
                    DataManagement = 1
                    HoleManagement = 1
                }        
                MirnovMdsI4 = {
                    NodeName = "\TOP.HARDWARE.ATCA_2.IOP_9.CHANNEL_4.ADC_INTEG"
                    Type = "float32" // Can be any of the node supported types
                    NumberOfElements = 1
                    DataManagement = 1
                    HoleManagement = 1
                }        
                MirnovMdsI5 = {
                    NodeName = "\TOP.HARDWARE.ATCA_2.IOP_9.CHANNEL_5.ADC_INTEG"
                    Type = "float32" // Can be any of the node supported types
                    NumberOfElements = 1
                    DataManagement = 1
                    HoleManagement = 1
                }        
                MirnovMdsI6 = {
                    NodeName = "\TOP.HARDWARE.ATCA_2.IOP_9.CHANNEL_6.ADC_INTEG"
                    Type = "float32" // Can be any of the node supported types
                    NumberOfElements = 1
                    DataManagement = 1
                    HoleManagement = 1
                }        
                MirnovMdsI7 = {
                    NodeName = "\TOP.HARDWARE.ATCA_2.IOP_9.CHANNEL_7.ADC_INTEG"
                    Type = "float32" // Can be any of the node supported types
                    NumberOfElements = 1
                    DataManagement = 1
                    HoleManagement = 1
                }        
                MirnovMdsI8 = {
                    NodeName = "\TOP.HARDWARE.ATCA_2.IOP_9.CHANNEL_8.ADC_INTEG"
                    Type = "float32" // Can be any of the node supported types
                    NumberOfElements = 1
                    DataManagement = 1
                    HoleManagement = 1
                }        
                MirnovMdsI9 = {
                    NodeName = "\TOP.HARDWARE.ATCA_2.IOP_9.CHANNEL_9.ADC_INTEG"
                    Type = "float32" // Can be any of the node supported types
                    NumberOfElements = 1
                    DataManagement = 1
                    HoleManagement = 1
                }        
                MirnovMdsI10 = {
                    NodeName = "\TOP.HARDWARE.ATCA_2.IOP_9.CHANNEL_10.ADC_INTEG"
                    Type = "float32" // Can be any of the node supported types
                    NumberOfElements = 1
                    DataManagement = 1
                    HoleManagement = 1
                }        
                MirnovMdsI11 = {
                    NodeName = "\TOP.HARDWARE.ATCA_2.IOP_9.CHANNEL_11.ADC_INTEG"
                    Type = "float32" // Can be any of the node supported types
                    NumberOfElements = 1
                    DataManagement = 1
                    HoleManagement = 1
                }        
                Time = { //Compulsory
                    Type = "uint32" //can be any of the supported types
                    NumberOfElements = 1 //must be always one.
                }
            }
        }
        +UDPWriter = {
            Class = UDP::UDPSender
            Port = 7755
            Address = "127.0.0.1" 
            ExecutionMode = RealTimeThread 
            Signals = {
                correctedMirnov0 = {
                    Type = float32
                }
                correctedMirnov1 = {
                    Type = float32
                }
                correctedMirnov2 = {
                    Type = float32
                }
                correctedMirnov3 = {
                    Type = float32
                }
                correctedMirnov4 = {
                    Type = float32
                }
                correctedMirnov5 = {
                    Type = float32
                }
                correctedMirnov6 = {
                    Type = float32
                }
                correctedMirnov7 = {
                    Type = float32
                }
                correctedMirnov8 = {
                    Type = float32
                }
                correctedMirnov9 = {
                    Type = float32
                }
                correctedMirnov10 = {
                    Type = float32
                }
                correctedMirnov11 = {
                    Type = float32
                }
            }
        }
        +Timer = {
            Class = LinuxTimer
            SleepNature = "Default"
            Signals = {
                Counter = {
                    Type = uint32
                }
                Time = {
                    Type = uint32
                }
            }
        }        

    }
    +States = {
        Class = ReferenceContainer
            +Idle = {
                Class = RealTimeState
                +Threads = {
                    Class = ReferenceContainer
                        +Thread1 = {
                            Class = RealTimeThread
                            CPUs = 0x1
                            Functions = {GAMTimer CounterGAM CountdownGAM MDSReaderGAM MdsTimeGAM MirnovCorrectionGAM GAMUDP GAMDisplay FWriterGAM}
                        }
                }
            }        
            +Run = {
                Class = RealTimeState
                +Threads = {
                    Class = ReferenceContainer
                        +Thread1 = {
                            Class = RealTimeThread
                            CPUs = 0x1
                            Functions = {GAMTimer MDSReaderGAM MirnovCorrectionGAM FWriterGAM} 
                        }
                }
            } 
    }
    +Scheduler = {
        Class = GAMScheduler
        TimingDataSource = Timings
    }
}
//  vim: syntax=cpp ts=4 sw=4 sts=4 sr et
