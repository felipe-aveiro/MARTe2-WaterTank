+WebRoot = {
    Class = HttpObjectBrowser
    Root = "."
    +ObjectBrowse = {
        Class = HttpObjectBrowser
        Root = "/"
    }
    +ResourcesHtml = {
        Class = HttpDirectoryResource
        BaseDir = "/opt/marte/MARTe2-dev/Resources/HTTP"
    }    
    +ResourcesHtmlDemo = {
        Class = HttpDirectoryResource
        BaseDir = "/home/felipe/Projects/MARTe2-demos-padova/Resources/HTTP"
    } 
    +HttpMessageInterface = {
        Class = HttpMessageInterface
        +GOTOIDLE = {
            Class = Message
            Destination = StateMachine
            Function = GOTOIDLE
            Mode = ExpectsReply
        }
        +GOTORUN = {
            Class = Message
            Destination = StateMachine
            Function = GOTORUN
            Mode = ExpectsReply
        }
        +GOTOERR = {
            Class = Message
            Destination = StateMachineError
            Function = GOTOERR 
            Mode = ExpectsReply
        }
    }
}
/*
//WARNING: Change values according to your local setup
+LoggerService = {
    Class = PlainLoggerService //See note 1
    +UDPLogger = {
        Class = UDPLogger
        // Address = "127.0.0.1" //MARTe2 LogView receiver address
        Address = "10.136.241.211" //MARTe2 LogView receiver address
        Port = 32767 //MARTe2 LogView receiver port
        Format = "EtOofFRmCP" //See note 2
        PrintKeys = 1 //This **must** be enabled, see note 3
    }
}
*/
+WebServer = {
    Class = HttpService
    Port = 8084
    WebRoot = WebRoot
    Timeout = 0
    ListenMaxConnections = 255
    AcceptTimeout = 1000
    MaxNumberOfThreads = 8
    MinNumberOfThreads = 1
}
+TCPMessageProxy = {
    Class = TCPSocketMessageProxyExample
    Port = 24680
}
// echo -e "Destination=StateMachine\nFunction=GOTORUN" | nc 127.0.0.1 24680
+StateMachine = {
    Class = StateMachine
    +INITIAL = {
        Class = ReferenceContainer      
        +START = {
            Class = StateMachineEvent
            NextState = "IDLE"
            NextStateError = "ERROR"
            Timeout = 0
            +StartHttpServer = {
                Class = Message
                Destination = "WebServer"
                Mode = ExpectsReply
                Function = "Start"
            }
            +ChangeToStateIdleMsg = {
                Class = Message
                Destination = WaterTankApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Idle
                }
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = WaterTankApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
    }
    +IDLE = {
        Class = ReferenceContainer
        +GOTORUN = {
            Class = StateMachineEvent
            NextState = "RUN"
            NextStateError = "ERROR"
            Timeout = 0 
            +ChangeToRunMsg = {
                Class = Message
                Destination = WaterTankApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Run
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = WaterTankApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = WaterTankApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
    }
    +RUN = {
        Class = ReferenceContainer
        +ENTER = {
            Class = ReferenceContainer
            +SetStatusPV = {
                Class = Message
                Destination = "EPICSCAInterface.PV_STATUS"
                Function = CAPut
                Mode = ExpectsReply
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = 1
                }
            }
        }
        +GOTOIDLE = {
            Class = StateMachineEvent
            NextState = "IDLE"
            NextStateError = "ERROR"
            Timeout = 0         
            +ChangeToIdleMsg = {
                Class = Message
                Destination = WaterTankApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Idle
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = WaterTankApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = WaterTankApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
            +SetStatusPV = {
                Class = Message
                Destination = "EPICSCAInterface.PV_STATUS"
                Function = CAPut
                Mode = ExpectsReply
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = 0
                }
            }
        }   
    }
    +ERROR = {
        Class = ReferenceContainer
        +ENTER = {
            Class = ReferenceContainer
            +SetStatusPV = {
                Class = Message
                Destination = "EPICSCAInterface.PV_STATUS"
                Function = CAPut
                Mode = ExpectsReply
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = -1
                }
            }
            +ChangeToErrorMsg = {
                Class = Message
                Destination = WaterTankApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Error
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = WaterTankApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = WaterTankApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
        +RESET = {
            Class = StateMachineEvent
            NextState = "IDLE"
            NextStateError = "ERROR"
            Timeout = 0         
            +ChangeToIdleMsg = {
                Class = Message
                Destination = WaterTankApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Idle
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = WaterTankApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = WaterTankApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
            +SetStatusPV = {
                Class = Message
                Destination = "EPICSCAInterface.PV_STATUS"
                Function = CAPut
                Mode = ExpectsReply
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = 0
                }
            }
        }   
    }
}

$WaterTankApp = {
    Class = RealTimeApplication
    +Functions = {
        Class = ReferenceContainer
        +GAMTimer = {
            Class = IOGAM
            InputSignals = {
                Counter = {
                    DataSource = Timer
                    Type = uint32
                }
                Time = {
                    Frequency = 10000
                    DataSource = Timer
                    Type = uint32
                }
            }
            OutputSignals = {
                Counter = {
                    DataSource = DDB1
                    Type = uint32
                }                
                Time = {
                    DataSource = DDB1
                    Type = uint32
                }            
            }
        }     
        +FileReaderGAM = {
            Class = IOGAM
            InputSignals = {
                timeI = {
                    DataSource = FileReader
                    Type = float64
                }
                integ_ch0 = {
                    DataSource = FileReader
                    Type = float64
                }
                integ_ch1 = {
                    DataSource = FileReader
                    Type = float64
                }
                integ_ch2 = {
                    DataSource = FileReader
                    Type = float64
                }
                integ_ch3 = {
                    DataSource = FileReader
                    Type = float64
                }
                integ_ch4 = {
                    DataSource = FileReader
                    Type = float64
                }
                integ_ch5 = {
                    DataSource = FileReader
                    Type = float64
                }
                integ_ch6 = {
                    DataSource = FileReader
                    Type = float64
                }
                integ_ch7 = {
                    DataSource = FileReader
                    Type = float64
                }
                integ_ch8 = {
                    DataSource = FileReader
                    Type = float64
                }
                integ_ch9 = {
                    DataSource = FileReader
                    Type = float64
                }
                integ_ch10 = {
                    DataSource = FileReader
                    Type = float64
                }
                integ_ch11 = {
                    DataSource = FileReader
                    Type = float64
                }
                integ_ch12 = {
                    DataSource = FileReader
                    Type = float64
                }
                chopper_trigger = {
                        DataSource = FileReader
                        Type = float64
                }
            }
            OutputSignals = {
                csv_timeI = {
                    DataSource = "DDB1"
                    Type = float64
                }
                csv_mirnov0 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                csv_mirnov1 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                csv_mirnov2 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                csv_mirnov3 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                csv_mirnov4 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                csv_mirnov5 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                csv_mirnov6 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                csv_mirnov7 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                csv_mirnov8 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                csv_mirnov9 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                csv_mirnov10 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                csv_mirnov11 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                rogowski_ch = {
                    DataSource = "DDB1"
                    Type = float64
                }
                chopper_trigger = {
                        DataSource = "DDB1"
                        Type = float64
                }
            }
        }
        +ConversionGAM = {
            Class = ConversionGAM
            InputSignals = {
                csv_timeI = {
                    DataSource = "DDB1"
                    Type = float64
                }
                csv_mirnov0 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                csv_mirnov1 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                csv_mirnov2 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                csv_mirnov3 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                csv_mirnov4 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                csv_mirnov5 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                csv_mirnov6 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                csv_mirnov7 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                csv_mirnov8 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                csv_mirnov9 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                csv_mirnov10 = {
                    DataSource = "DDB1"
                    Type = float64
                }
                csv_mirnov11 = {
                    DataSource = "DDB1"
                    Type = float64
                }
            }
            OutputSignals = {
                timeI = {
                    DataSource = "DDB1"
                    Type = float32
                }
                integMirnov0 = {
                    DataSource = "DDB1"
                    Type = float32
                }
                integMirnov1 = {
                    DataSource = "DDB1"
                    Type = float32
                }
                integMirnov2 = {
                    DataSource = "DDB1"
                    Type = float32
                }
                integMirnov3 = {
                    DataSource = "DDB1"
                    Type = float32
                }
                integMirnov4 = {
                    DataSource = "DDB1"
                    Type = float32
                }
                integMirnov5 = {
                    DataSource = "DDB1"
                    Type = float32
                }
                integMirnov6 = {
                    DataSource = "DDB1"
                    Type = float32
                }
                integMirnov7 = {
                    DataSource = "DDB1"
                    Type = float32
                }
                integMirnov8 = {
                    DataSource = "DDB1"
                    Type = float32
                }
                integMirnov9 = {
                    DataSource = "DDB1"
                    Type = float32
                }
                integMirnov10 = {
                    DataSource = "DDB1"
                    Type = float32
                }
                integMirnov11 = {
                    DataSource = "DDB1"
                    Type = float32
                }
            }
        }
        +MagneticADCConversionGAM = {
            Class = MagneticADCConversionGAM
            InputSignals = {
                integMirnov0 = {DataSource = "DDB1" Type = float32}
                integMirnov1 = {DataSource = "DDB1" Type = float32}
                integMirnov2 = {DataSource = "DDB1" Type = float32}
                integMirnov3 = {DataSource = "DDB1" Type = float32}
                integMirnov4 = {DataSource = "DDB1" Type = float32}
                integMirnov5 = {DataSource = "DDB1" Type = float32}
                integMirnov6 = {DataSource = "DDB1" Type = float32}
                integMirnov7 = {DataSource = "DDB1" Type = float32}
                integMirnov8 = {DataSource = "DDB1" Type = float32}
                integMirnov9 = {DataSource = "DDB1" Type = float32}
                integMirnov10 = {DataSource = "DDB1" Type = float32}
                integMirnov11 = {DataSource = "DDB1" Type = float32}
            }
            OutputSignals = {
                inputMirnov0 = {DataSource = "DDB1" Type = float32}
                inputMirnov1 = {DataSource = "DDB1" Type = float32}
                inputMirnov2 = {DataSource = "DDB1" Type = float32}
                inputMirnov3 = {DataSource = "DDB1" Type = float32}
                inputMirnov4 = {DataSource = "DDB1" Type = float32}
                inputMirnov5 = {DataSource = "DDB1" Type = float32}
                inputMirnov6 = {DataSource = "DDB1" Type = float32}
                inputMirnov7 = {DataSource = "DDB1" Type = float32}
                inputMirnov8 = {DataSource = "DDB1" Type = float32}
                inputMirnov9 = {DataSource = "DDB1" Type = float32}
                inputMirnov10 = {DataSource = "DDB1" Type = float32}
                inputMirnov11 = {DataSource = "DDB1" Type = float32}
            }
        }
        +FWriterGAM = {
            Class = IOGAM            
                InputSignals = {
                    timeI = {
                        DataSource = "DDB1"
                        Type = float32
                    }
                    inputMirnov0 = {
                        DataSource = "DDB1"
                        Type = float32
                    }
                    inputMirnov1 = {
                        DataSource = "DDB1"
                        Type = float32
                    }
                    inputMirnov2 = {
                        DataSource = "DDB1"
                        Type = float32
                    }
                    inputMirnov3 = {
                        DataSource = "DDB1"
                        Type = float32
                    }
                    inputMirnov4 = {
                        DataSource = "DDB1"
                        Type = float32
                    }
                    inputMirnov5 = {
                        DataSource = "DDB1"
                        Type = float32
                    }
                    inputMirnov6 = {
                        DataSource = "DDB1"
                        Type = float32
                    }
                    inputMirnov7 = {
                        DataSource = "DDB1"
                        Type = float32
                    }
                    inputMirnov8 = {
                        DataSource = "DDB1"
                        Type = float32
                    }
                    inputMirnov9 = {
                        DataSource = "DDB1"
                        Type = float32
                    }
                    inputMirnov10 = {
                        DataSource = "DDB1"
                        Type = float32
                    }
                    inputMirnov11 = {
                        DataSource = "DDB1"
                        Type = float32
                    }
                }
                OutputSignals = {
                    timeI = {
                        DataSource = "FileWriter_DS"
                        Type = float32
                    }
                    inputMirnov0 = {
                        DataSource = "FileWriter_DS"
                        Type = float32
                    }
                    inputMirnov1 = {
                        DataSource = "FileWriter_DS"
                        Type = float32
                    }
                    inputMirnov2 = {
                        DataSource = "FileWriter_DS"
                        Type = float32
                    }
                    inputMirnov3 = {
                        DataSource = "FileWriter_DS"
                        Type = float32
                    }
                    inputMirnov4 = {
                        DataSource = "FileWriter_DS"
                        Type = float32
                    }
                    inputMirnov5 = {
                        DataSource = "FileWriter_DS"
                        Type = float32
                    }
                    inputMirnov6 = {
                        DataSource = "FileWriter_DS"
                        Type = float32
                    }
                    inputMirnov7 = {
                        DataSource = "FileWriter_DS"
                        Type = float32
                    }
                    inputMirnov8 = {
                        DataSource = "FileWriter_DS"
                        Type = float32
                    }
                    inputMirnov9 = {
                        DataSource = "FileWriter_DS"
                        Type = float32
                    }
                    inputMirnov10 = {
                        DataSource = "FileWriter_DS"
                        Type = float32
                    }
                    inputMirnov11 = {
                        DataSource = "FileWriter_DS"
                        Type = float32
                    }
                }
        }
    }
    +Data = {
        Class = ReferenceContainer
        DefaultDataSource = DDB1
        +DDB1 = {
            Class = GAMDataSource
        }        
        +LoggerDataSource = {
            Class = LoggerDataSource
        }
        +Timings = {
            Class = TimingDataSource
        }
        +FileWriter_DS = {
            Class = FileDataSource::FileWriter
            NumberOfBuffers = 10000
            CPUMask = 1 
            StackSize = 10000000
            Filename = "../DataVisualization/Outputs/AtcaAdcConversionTest.csv" 
            Overwrite = "yes" 
            FileFormat = "csv"
            CSVSeparator = ";" 
            StoreOnTrigger = 0  //Compulsory. If 0 all the data in the circular buffer is continuously stored. If 1 data is stored when the Trigger signal is 1 (see below).
            Signals = {
                timeI = {
                    Type = float32
                }
                inputMirnov0 = {
                    Type = float32
                }
                inputMirnov1 = {
                    Type = float32
                }
                inputMirnov2 = {
                    Type = float32
                }
                inputMirnov3 = {
                    Type = float32
                }
                inputMirnov4 = {
                    Type = float32
                }
                inputMirnov5 = {
                    Type = float32
                }
                inputMirnov6 = {
                    Type = float32
                }
                inputMirnov7 = {
                    Type = float32
                }
                inputMirnov8 = {
                    Type = float32
                }
                inputMirnov9 = {
                    Type = float32
                }
                inputMirnov10 = {
                    Type = float32
                }
                inputMirnov11 = {
                    Type = float32
                }
            }
        }
        +Timer = {
            Class = LinuxTimer
            SleepNature = "Default"
            Signals = {
                Counter = {
                    Type = uint32
                }
                Time = {
                    Type = uint32
                }
            }
        }        
        +FileReader = {
            Class = FileDataSource::FileReader
            Filename = "../DataVisualization/ISTTOK_shots_CSV_files/csv/MDS_shot_53071.csv" 
            FileFormat = "csv"
            CSVSeparator = ","
            Interpolate = "no"
            EOF = "Error"
            +Messages = {
                Class = ReferenceContainer
                +FileRuntimeError = {
                    Class = Message
                    Destination = WaterTankApp
                    Function = PrepareNextState
                    Mode = ExpectsReply
                    +Parameters = {
                            Class = ConfigurationDatabase
                            param1 = Run
                        }
                    }
            }
        }
    }
    +States = {
        Class = ReferenceContainer
            +Idle = {
                Class = RealTimeState
                +Threads = {
                    Class = ReferenceContainer
                        +Thread1 = {
                            Class = RealTimeThread
                            CPUs = 0x1
                            Functions = {GAMTimer FileReaderGAM ConversionGAM MagneticADCConversionGAM FWriterGAM}
                        }
                }
            }        
            +Run = {
                Class = RealTimeState
                +Threads = {
                    Class = ReferenceContainer
                        +Thread1 = {
                            Class = RealTimeThread
                            CPUs = 0x1
                            Functions = {GAMTimer} 
                        }
                }
            } 
    }
    +Scheduler = {
        Class = GAMScheduler
        TimingDataSource = Timings
    }
}
//  vim: syntax=cpp ts=4 sw=4 sts=4 sr et
