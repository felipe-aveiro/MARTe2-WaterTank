+WebRoot = {
    Class = HttpObjectBrowser
    Root = "."
    +ObjectBrowse = {
        Class = HttpObjectBrowser
        Root = "/"
    }
    +ResourcesHtml = {
        Class = HttpDirectoryResource
        BaseDir = "/opt/marte/MARTe2-dev/Resources/HTTP"
    }    
    +ResourcesHtmlDemo = {
        Class = HttpDirectoryResource
        BaseDir = "/home/felipe/Projects/MARTe2-demos-padova/Resources/HTTP"
    } 
    +HttpMessageInterface = {
        Class = HttpMessageInterface
        +GOTOIDLE = {
            Class = Message
            Destination = StateMachine
            Function = GOTOIDLE
            Mode = ExpectsReply
        }
        +GOTORUN = {
            Class = Message
            Destination = StateMachine
            Function = GOTORUN
            Mode = ExpectsReply
        }
        +GOTOERR = {
            Class = Message
            Destination = StateMachineError
            Function = GOTOERR 
            Mode = ExpectsReply
        }
    }
}
/*
//WARNING: Change values according to your local setup
+LoggerService = {
    Class = PlainLoggerService //See note 1
    +UDPLogger = {
        Class = UDPLogger
        // Address = "127.0.0.1" //MARTe2 LogView receiver address
        Address = "10.136.241.211" //MARTe2 LogView receiver address
        Port = 32767 //MARTe2 LogView receiver port
        Format = "EtOofFRmCP" //See note 2
        PrintKeys = 1 //This **must** be enabled, see note 3
    }
}
*/
+WebServer = {
    Class = HttpService
    Port = 8084
    WebRoot = WebRoot
    Timeout = 0
    ListenMaxConnections = 255
    AcceptTimeout = 1000
    MaxNumberOfThreads = 8
    MinNumberOfThreads = 1
}
+TCPMessageProxy = {
    Class = TCPSocketMessageProxyExample
    Port = 24680
}
// echo -e "Destination=StateMachine\nFunction=GOTORUN" | nc 127.0.0.1 24680
+StateMachine = {
    Class = StateMachine
    +INITIAL = {
        Class = ReferenceContainer      
        +START = {
            Class = StateMachineEvent
            NextState = "IDLE"
            NextStateError = "ERROR"
            Timeout = 0
            +StartHttpServer = {
                Class = Message
                Destination = "WebServer"
                Mode = ExpectsReply
                Function = "Start"
            }
            +ChangeToStateIdleMsg = {
                Class = Message
                Destination = WaterTankApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Idle
                }
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = WaterTankApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
    }
    +IDLE = {
        Class = ReferenceContainer
        +GOTORUN = {
            Class = StateMachineEvent
            NextState = "RUN"
            NextStateError = "ERROR"
            Timeout = 0 
            +ChangeToRunMsg = {
                Class = Message
                Destination = WaterTankApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Run
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = WaterTankApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = WaterTankApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
    }
    +RUN = {
        Class = ReferenceContainer
        +ENTER = {
            Class = ReferenceContainer
            +SetStatusPV = {
                Class = Message
                Destination = "EPICSCAInterface.PV_STATUS"
                Function = CAPut
                Mode = ExpectsReply
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = 1
                }
            }
        }
        +GOTOIDLE = {
            Class = StateMachineEvent
            NextState = "IDLE"
            NextStateError = "ERROR"
            Timeout = 0         
            +ChangeToIdleMsg = {
                Class = Message
                Destination = WaterTankApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Idle
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = WaterTankApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = WaterTankApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
            +SetStatusPV = {
                Class = Message
                Destination = "EPICSCAInterface.PV_STATUS"
                Function = CAPut
                Mode = ExpectsReply
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = 0
                }
            }
        }   
    }
    +ERROR = {
        Class = ReferenceContainer
        +ENTER = {
            Class = ReferenceContainer
            +SetStatusPV = {
                Class = Message
                Destination = "EPICSCAInterface.PV_STATUS"
                Function = CAPut
                Mode = ExpectsReply
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = -1
                }
            }
            +ChangeToErrorMsg = {
                Class = Message
                Destination = WaterTankApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Error
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = WaterTankApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = WaterTankApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
        +RESET = {
            Class = StateMachineEvent
            NextState = "IDLE"
            NextStateError = "ERROR"
            Timeout = 0         
            +ChangeToIdleMsg = {
                Class = Message
                Destination = WaterTankApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Idle
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = WaterTankApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = WaterTankApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
            +SetStatusPV = {
                Class = Message
                Destination = "EPICSCAInterface.PV_STATUS"
                Function = CAPut
                Mode = ExpectsReply
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = 0
                }
            }
        }   
    }
}

$WaterTankApp = {
    Class = RealTimeApplication
    +Functions = {
        Class = ReferenceContainer
        +GAMTimer = {
            Class = IOGAM
            InputSignals = {
                Counter = {
                    DataSource = Timer
                    Type = uint32
                }
                Time = {
                    Frequency = 10000
                    DataSource = Timer
                    Type = uint32
                }
            }
            OutputSignals = {
                Counter = {
                    DataSource = DDB1
                    Type = uint32
                }                
                Time = {
                    DataSource = DDB1
                    Type = uint32
                }            
            }
        }
        +FileReaderGAM = {
            Class = IOGAM
            InputSignals = {
                Level = {
                    DataSource = FileReader
                    Type = float64
                }
            }
            OutputSignals = {
                CurrentLevel = {
                    DataSource = "DDB1"
                    Type = float64
                }
            }
        }
        +ConvertGAM = {
            Class = ConversionGAM
            InputSignals = {
                CurrentLevel = {
                    DataSource = "DDB1"
                    Type = float64
                }
            }
            OutputSignals = {
                converted_value = {
                    DataSource = "DDB1"
                    Type = uint8
                }
            }
        }
        +EvalGAM = {
            Class = MathExpressionGAM
            Expression = "
                          valve_on = converted_value > (uint8)50;
                          pump_on = converted_value < (uint8)50;
                         "
            InputSignals = {
                converted_value = {
                    DataSource = "DDB1"
                    Type = uint8
                }
            }
            OutputSignals = {
                valve_on = {
                    DataSource = "DDB1"
                    Type = uint8
                }
                pump_on = {
                    DataSource = "DDB1"
                    Type = uint8
                }
            }
        }
        +GAMDisplay = {
            Class = IOGAM            
            InputSignals = {
                Time = {
                    DataSource = DDB1
                    Type = uint32
                }
                valve_on = {
                    DataSource = "DDB1"
                    Type = uint8
                }
                pump_on = {
                    DataSource = "DDB1"
                    Type = uint8
                }
            }
            OutputSignals = {
                Time = {
                    DataSource = LoggerDataSource
                    Type = uint32
                }
                valve_on = {
                    DataSource = LoggerDataSource
                    Type = uint8
                }
                pump_on = {
                    DataSource = LoggerDataSource
                    Type = uint8
                }
            }
        }       
        +MDSReaderGAM = {
            Class = IOGAM
                InputSignals = {
                    MirnovMdsI0 = {
                        DataSource = MDSReader
                            Type = float32
                    }
                    MirnovMdsI1 = {
                        DataSource = MDSReader
                            Type = float32
                    }
                    MirnovMdsI2 = {
                        DataSource = MDSReader
                            Type = float32
                    }
                    MirnovMdsI3 = {
                        DataSource = MDSReader
                            Type = float32
                    }
                    MirnovMdsI4 = {
                        DataSource = MDSReader
                            Type = float32
                    }
                    MirnovMdsI5 = {
                        DataSource = MDSReader
                            Type = float32
                    }
                    MirnovMdsI6 = {
                        DataSource = MDSReader
                            Type = float32
                    }
                    MirnovMdsI7 = {
                        DataSource = MDSReader
                            Type = float32
                    }
                    MirnovMdsI8 = {
                        DataSource = MDSReader
                            Type = float32
                    }
                    MirnovMdsI9 = {
                        DataSource = MDSReader
                            Type = float32
                    }
                    MirnovMdsI10 = {
                        DataSource = MDSReader
                            Type = float32
                    }
                    MirnovMdsI11 = {
                        DataSource = MDSReader
                            Type = float32
                    }
                    Time = {
                        DataSource = MDSReader
                            Type = uint32
                    }
                }                
                OutputSignals = {
                    Mirnov0 = {
                        DataSource = "DDB1"
                        Type = float32
                    }
                    Mirnov1 = {
                        DataSource = "DDB1"
                        Type = float32
                    }
                    Mirnov2 = {
                        DataSource = "DDB1"
                        Type = float32
                    }
                    Mirnov3 = {
                        DataSource = "DDB1"
                        Type = float32
                    }
                    Mirnov4 = {
                        DataSource = "DDB1"
                        Type = float32
                    }
                    Mirnov5 = {
                        DataSource = "DDB1"
                        Type = float32
                    }
                    Mirnov6 = {
                        DataSource = "DDB1"
                        Type = float32
                    }
                    Mirnov7 = {
                        DataSource = "DDB1"
                        Type = float32
                    }
                    Mirnov8 = {
                        DataSource = "DDB1"
                        Type = float32
                    }
                    Mirnov9 = {
                        DataSource = "DDB1"
                        Type = float32
                    }
                    Mirnov10 = {
                        DataSource = "DDB1"
                        Type = float32
                    }
                    Mirnov11 = {
                        DataSource = "DDB1"
                        Type = float32
                    }
                    MdsTime = {
                        DataSource = "DDB1"
                        Type = uint32
                    }
                }
        }                
        +GAMUDP = {
            Class = IOGAM            
                InputSignals = {
                    Counter = {
                        DataSource = DDB1
                            Type = uint32
                    }
                    Time = {
                        DataSource = DDB1
                            Type = uint32
                    }
                    CurrentLevel = {
                        DataSource = DDB1
                            Type = float64
                    }
                } 
            OutputSignals = {
                Counter = {
                    DataSource = UDPWriter
                        Type = uint32
                }
                Time = {
                    DataSource = UDPWriter
                        Type = uint32
                }
                Signal2 = {
                    DataSource = UDPWriter
                        Type = float64
                }
            }
        }
    }
    +Data = {
        Class = ReferenceContainer
        DefaultDataSource = DDB1
        +DDB1 = {
            Class = GAMDataSource
        }        
        +LoggerDataSource = {
            Class = LoggerDataSource
        }
        +Timings = {
            Class = TimingDataSource
        }
        +FileReader = {
            Class = FileDataSource::FileReader
            Filename = "../Configurations/water_tank.csv" 
            FileFormat = "csv"
            CSVSeparator = ","
            Interpolate = "no"
            EOF = "Rewind"
        }
        +MDSReader = {
            Class = MDSReader
            TreeName = "isttokmarte" //Compulsory. Name of the MDSplus tree.
            ShotNumber = 52740 //Compulsory. 0 –> last shot number (to use 0 shotid.sys must exist)
            Frequency = 10000  // in Hz. Is the cycle time of the real time application.
            Signals = {
                MirnovMdsI0 = {
                    NodeName = "\TOP.HARDWARE.ATCA_2.IOP_9.CHANNEL_0.ADC_INTEG"
                    Type = "float32" // Can be any of the node supported types
                    NumberOfElements = 1
/*
0 –> MDSReader takes the data from the tree as it is (raw). In this configuration, the frequency/numberOfElements must be the same than the node sampling frequency.
1–> MDSReader interpolates the signal taking as a reference the two nearest data values. If the frequency/numberOfElements is smaller than the sample frequency of the MDSplus node the data source interpolates the signal. If the frequency/numberOfElements larger than the node sample frequency the signals is decimated.
2 –> MDSReader holds the value following the criteria of the nearest value given specific time. I.e the node data is (t1, d1) = (1, 1) and (t2, d2) = (2, 5) and the currentTime is t = 1.6 the nearest data to the given time is 5.
  */                  
                    DataManagement = 1 //could be 0, 1 or 2
/*
 *0 –> MDSreader fills the absence of data with 0
* 1 –> MDSReader fills the absence of data with the last value.
*/
                    HoleManagement = 1 //could be 0 or 1
                }        
                MirnovMdsI1 = {
                    NodeName = "\TOP.HARDWARE.ATCA_2.IOP_9.CHANNEL_1.ADC_INTEG"
                    Type = "float32" // Can be any of the node supported types
                    NumberOfElements = 1
                    DataManagement = 1
                    HoleManagement = 1
                }        
                MirnovMdsI2 = {
                    NodeName = "\TOP.HARDWARE.ATCA_2.IOP_9.CHANNEL_2.ADC_INTEG"
                    Type = "float32" // Can be any of the node supported types
                    NumberOfElements = 1
                    DataManagement = 1
                    HoleManagement = 1
                }        
                MirnovMdsI3 = {
                    NodeName = "\TOP.HARDWARE.ATCA_2.IOP_9.CHANNEL_3.ADC_INTEG"
                    Type = "float32" // Can be any of the node supported types
                    NumberOfElements = 1
                    DataManagement = 1
                    HoleManagement = 1
                }        
                MirnovMdsI4 = {
                    NodeName = "\TOP.HARDWARE.ATCA_2.IOP_9.CHANNEL_4.ADC_INTEG"
                    Type = "float32" // Can be any of the node supported types
                    NumberOfElements = 1
                    DataManagement = 1
                    HoleManagement = 1
                }        
                MirnovMdsI5 = {
                    NodeName = "\TOP.HARDWARE.ATCA_2.IOP_9.CHANNEL_5.ADC_INTEG"
                    Type = "float32" // Can be any of the node supported types
                    NumberOfElements = 1
                    DataManagement = 1
                    HoleManagement = 1
                }        
                MirnovMdsI6 = {
                    NodeName = "\TOP.HARDWARE.ATCA_2.IOP_9.CHANNEL_6.ADC_INTEG"
                    Type = "float32" // Can be any of the node supported types
                    NumberOfElements = 1
                    DataManagement = 1
                    HoleManagement = 1
                }        
                MirnovMdsI7 = {
                    NodeName = "\TOP.HARDWARE.ATCA_2.IOP_9.CHANNEL_7.ADC_INTEG"
                    Type = "float32" // Can be any of the node supported types
                    NumberOfElements = 1
                    DataManagement = 1
                    HoleManagement = 1
                }        
                MirnovMdsI8 = {
                    NodeName = "\TOP.HARDWARE.ATCA_2.IOP_9.CHANNEL_8.ADC_INTEG"
                    Type = "float32" // Can be any of the node supported types
                    NumberOfElements = 1
                    DataManagement = 1
                    HoleManagement = 1
                }        
                MirnovMdsI9 = {
                    NodeName = "\TOP.HARDWARE.ATCA_2.IOP_9.CHANNEL_9.ADC_INTEG"
                    Type = "float32" // Can be any of the node supported types
                    NumberOfElements = 1
                    DataManagement = 1
                    HoleManagement = 1
                }        
                MirnovMdsI10 = {
                    NodeName = "\TOP.HARDWARE.ATCA_2.IOP_9.CHANNEL_10.ADC_INTEG"
                    Type = "float32" // Can be any of the node supported types
                    NumberOfElements = 1
                    DataManagement = 1
                    HoleManagement = 1
                }        
                MirnovMdsI11 = {
                    NodeName = "\TOP.HARDWARE.ATCA_2.IOP_9.CHANNEL_11.ADC_INTEG"
                    Type = "float32" // Can be any of the node supported types
                    NumberOfElements = 1
                    DataManagement = 1
                    HoleManagement = 1
                }        
                Time = { //Compulsory
                    Type = "uint32" //can be any of the supported types
                    NumberOfElements = 1 //must be always one.
                }
            }
        }
        +UDPWriter = {
            Class = UDP::UDPSender
            Port = 7755
            Address = "127.0.0.1" 
            ExecutionMode = RealTimeThread 
            Signals = {
                Counter = {
                    Type = uint32
                }
                Time = {
                    Type = uint32
                }
                Signal2 = {
                    Type = float64
                }
            }
        }
        +Timer = {
            Class = LinuxTimer
            SleepNature = "Default"
            Signals = {
                Counter = {
                    Type = uint32
                }
                Time = {
                    Type = uint32
                }
            }
        }        

    }
    +States = {
        Class = ReferenceContainer
            +Idle = {
                Class = RealTimeState
                +Threads = {
                    Class = ReferenceContainer
                        +Thread1 = {
                            Class = RealTimeThread
                            CPUs = 0x1
                            Functions = {GAMTimer FileReaderGAM ConvertGAM EvalGAM GAMDisplay GAMUDP}
                        }
                }
            }        
            +Run = {
                Class = RealTimeState
                +Threads = {
                    Class = ReferenceContainer
                        +Thread1 = {
                            Class = RealTimeThread
                            CPUs = 0x1
                            Functions = {GAMTimer FileReaderGAM MDSReaderGAM ConvertGAM EvalGAM GAMDisplay GAMUDP}
                        }
                }
            } 
    }
    +Scheduler = {
        Class = GAMScheduler
        TimingDataSource = Timings
    }
}
//  vim: syntax=cpp ts=4 sw=4 sts=4 sr et
